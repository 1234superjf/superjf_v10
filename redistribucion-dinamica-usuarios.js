/**
 * üéØ REDISTRIBUCI√ìN DIN√ÅMICA PARA GESTI√ìN DE USUARIOS
 * 
 * Este script simula lo que har√≠as manualmente en "Gesti√≥n de Usuarios" ‚Üí "Asignaciones"
 * pero de forma automatizada y completamente din√°mica.
 */

console.log('üéØ INICIANDO REDISTRIBUCI√ìN DIN√ÅMICA...');

function redistribuirEstudiantesDinamicamente() {
    console.log('\nüéØ [REDISTRIBUCI√ìN] Simulando cambios en Gesti√≥n de Usuarios...');
    
    try {
        // Cargar datos actuales
        let users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        let courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        let sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        let studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
        
        const students = users.filter(u => u.role === 'student');
        
        console.log('üìä Estado actual: Todos en 4to B√°sico - Secci√≥n A');
        console.log('üéØ Objetivo: Distribuir en diferentes cursos y secciones');
        
        // Limpiar asignaciones actuales
        studentAssignments = [];
        
        // Definir nueva distribuci√≥n (ejemplo)
        const nuevaDistribucion = [
            { estudiante: 'felipe', curso: '4to B√°sico', seccion: 'A' },
            { estudiante: 'maria', curso: '4to B√°sico', seccion: 'A' },
            { estudiante: 'karla', curso: '4to B√°sico', seccion: 'B' },
            { estudiante: 'sofia', curso: '4to B√°sico', seccion: 'B' },
            { estudiante: 'gustavo', curso: '5to B√°sico', seccion: 'A' },
            { estudiante: 'max', curso: '5to B√°sico', seccion: 'A' }
        ];
        
        console.log('\nüìã [NUEVA DISTRIBUCI√ìN PROPUESTA]:');
        nuevaDistribucion.forEach(item => {
            console.log(`   ‚Ä¢ ${item.estudiante} ‚Üí ${item.curso} Secci√≥n ${item.seccion}`);
        });
        
        // Preguntar al usuario si quiere aplicar esta distribuci√≥n
        console.log('\n‚ùì ¬øQUIERES APLICAR ESTA DISTRIBUCI√ìN?');
        console.log('   Escribe: aplicarDistribucion() para confirmar');
        console.log('   O modifica manualmente en "Gesti√≥n de Usuarios"');
        
        // Funci√≥n para aplicar la distribuci√≥n
        window.aplicarDistribucion = function() {
            console.log('\nüîÑ [APLICANDO] Redistribuyendo estudiantes...');
            
            let asignacionesCreadas = 0;
            
            nuevaDistribucion.forEach(item => {
                // Buscar estudiante
                const student = students.find(s => 
                    s.username.toLowerCase() === item.estudiante.toLowerCase() ||
                    s.displayName?.toLowerCase() === item.estudiante.toLowerCase()
                );
                
                if (!student) {
                    console.log(`‚ùå No se encontr√≥ estudiante: ${item.estudiante}`);
                    return;
                }
                
                // Buscar curso
                const course = courses.find(c => c.name === item.curso);
                if (!course) {
                    console.log(`‚ùå No se encontr√≥ curso: ${item.curso}`);
                    return;
                }
                
                // Buscar secci√≥n
                const section = sections.find(s => 
                    s.courseId === course.id && s.name === item.seccion
                );
                if (!section) {
                    console.log(`‚ùå No se encontr√≥ secci√≥n ${item.seccion} para curso ${item.curso}`);
                    return;
                }
                
                // Crear nueva asignaci√≥n
                const newAssignment = {
                    id: `assignment-${student.id}-${Date.now()}-${asignacionesCreadas}`,
                    studentId: student.id,
                    courseId: course.id,
                    sectionId: section.id,
                    createdAt: new Date().toISOString(),
                    createdBy: 'dynamic-redistribution'
                };
                
                studentAssignments.push(newAssignment);
                
                // Actualizar datos del estudiante
                student.activeCourses = [`${item.curso} - Secci√≥n ${item.seccion}`];
                student.sectionName = item.seccion;
                
                console.log(`‚úÖ ${student.displayName || student.username} ‚Üí ${item.curso} Secci√≥n ${item.seccion}`);
                asignacionesCreadas++;
            });
            
            // Guardar cambios
            localStorage.setItem('smart-student-users', JSON.stringify(users));
            localStorage.setItem('smart-student-student-assignments', JSON.stringify(studentAssignments));
            
            console.log(`\nüéâ [COMPLETADO] ${asignacionesCreadas} estudiantes redistribuidos`);
            console.log('\nüí° [SIGUIENTE PASO]:');
            console.log('   1. Recarga la p√°gina (F5)');
            console.log('   2. Crea una nueva tarea');
            console.log('   3. Prueba seleccionar diferentes cursos-secciones');
            console.log('   4. ¬°Ahora "Estudiantes espec√≠ficos" mostrar√° solo los de esa secci√≥n!');
            
            // Verificar resultado
            verificarNuevaDistribucion();
        };
        
        // Funci√≥n para verificar la nueva distribuci√≥n
        window.verificarNuevaDistribucion = function() {
            console.log('\nüîç [VERIFICANDO] Nueva distribuci√≥n...');
            
            const updatedAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
            const groupedBySection = {};
            
            updatedAssignments.forEach(assignment => {
                const student = students.find(s => s.id === assignment.studentId);
                const course = courses.find(c => c.id === assignment.courseId);
                const section = sections.find(s => s.id === assignment.sectionId);
                
                if (student && course && section) {
                    const key = `${course.name} - Secci√≥n ${section.name}`;
                    if (!groupedBySection[key]) {
                        groupedBySection[key] = [];
                    }
                    groupedBySection[key].push(student.displayName || student.username);
                }
            });
            
            console.log('\nüìö [DISTRIBUCI√ìN ACTUAL]:');
            Object.keys(groupedBySection).forEach(grupo => {
                console.log(`\nüìñ ${grupo}:`);
                groupedBySection[grupo].forEach(nombre => {
                    console.log(`   ‚Ä¢ ${nombre}`);
                });
            });
        };
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error en redistribuci√≥n din√°mica:', error);
        return false;
    }
}

// Funci√≥n alternativa: Redistribuci√≥n personalizada
function redistribucionPersonalizada() {
    console.log('\nüé® [PERSONALIZADA] Para hacer tu propia distribuci√≥n:');
    console.log('1. Ve a "Gesti√≥n de Usuarios" (modo Admin)');
    console.log('2. Selecciona la pesta√±a "Asignaciones"');
    console.log('3. Para cada estudiante:');
    console.log('   - Selecciona el estudiante');
    console.log('   - Elige el curso deseado');
    console.log('   - Elige la secci√≥n deseada');
    console.log('   - Guarda la asignaci√≥n');
    console.log('4. Repite para todos los estudiantes');
    console.log('5. ¬°El filtrado din√°mico funcionar√° autom√°ticamente!');
}

// Ejecutar
console.log('üöÄ Ejecutando redistribuci√≥n din√°mica...');
const resultado = redistribuirEstudiantesDinamicamente();

if (resultado) {
    console.log('\n‚úÖ REDISTRIBUCI√ìN DIN√ÅMICA LISTA');
    console.log('\nüîß OPCIONES DISPONIBLES:');
    console.log('   ‚Ä¢ aplicarDistribucion() - Para aplicar la distribuci√≥n sugerida');
    console.log('   ‚Ä¢ verificarNuevaDistribucion() - Para verificar cambios');
    console.log('   ‚Ä¢ redistribucionPersonalizada() - Para instrucciones manuales');
} else {
    console.log('\n‚ùå ERROR en redistribuci√≥n din√°mica');
}
