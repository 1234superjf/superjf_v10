/**
 * üîÑ CORRECCI√ìN DIN√ÅMICA COMPLETA
 * 
 * Elimina TODOS los valores hardcodeados y sincroniza din√°micamente
 * con las asignaciones reales de Gesti√≥n de Usuarios.
 */

console.log('üîÑ CORRECCI√ìN DIN√ÅMICA COMPLETA...');
console.log('==================================');

function corregirAsignacionesDinamicas() {
    try {
        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');

        console.log('üìä ESTADO ANTES DE LA CORRECCI√ìN:');
        console.log('=================================');

        const estudiantes = users.filter(u => u.role === 'student');
        
        console.log('\nüîç REVISANDO CADA ESTUDIANTE:');
        estudiantes.forEach((estudiante, index) => {
            console.log(`\n${index + 1}. ${estudiante.username.toUpperCase()}`);
            console.log(`   Perfil actual: ${JSON.stringify(estudiante.activeCourses || [])}`);
            
            const asignacion = studentAssignments.find(a => a.studentId === estudiante.id);
            if (asignacion) {
                const curso = courses.find(c => c.id === asignacion.courseId);
                const seccion = sections.find(s => s.id === asignacion.sectionId);
                console.log(`   Gesti√≥n dice: ${curso?.name} - Secci√≥n ${seccion?.name}`);
            } else {
                console.log(`   ‚ùå Sin asignaci√≥n en gesti√≥n`);
            }
        });

        console.log('\nüîß APLICANDO CORRECCI√ìN DIN√ÅMICA...');
        console.log('====================================');

        let corregidos = 0;
        let sinAsignacion = 0;

        estudiantes.forEach(estudiante => {
            // Buscar la asignaci√≥n oficial en gesti√≥n de usuarios
            const asignacion = studentAssignments.find(a => a.studentId === estudiante.id);
            
            if (asignacion) {
                const curso = courses.find(c => c.id === asignacion.courseId);
                const seccion = sections.find(s => s.id === asignacion.sectionId);
                
                if (curso && seccion) {
                    // APLICAR ASIGNACI√ìN DIN√ÅMICA REAL
                    const cursoReal = `${curso.name} - Secci√≥n ${seccion.name}`;
                    
                    // Limpiar CUALQUIER valor anterior (eliminar hardcodeo)
                    estudiante.activeCourses = [cursoReal];
                    
                    console.log(`‚úÖ ${estudiante.username}: ${cursoReal}`);
                    corregidos++;
                } else {
                    console.log(`‚ö†Ô∏è ${estudiante.username}: Asignaci√≥n apunta a curso/secci√≥n inexistente`);
                    // Limpiar datos incorrectos
                    estudiante.activeCourses = [];
                }
            } else {
                console.log(`‚ùå ${estudiante.username}: Sin asignaci√≥n oficial - LIMPIANDO perfil`);
                // Eliminar cualquier valor hardcodeado si no hay asignaci√≥n
                estudiante.activeCourses = [];
                sinAsignacion++;
            }
        });

        // Guardar cambios
        localStorage.setItem('smart-student-users', JSON.stringify(users));

        console.log('\nüéâ CORRECCI√ìN COMPLETADA:');
        console.log('=========================');
        console.log(`‚úÖ Estudiantes corregidos: ${corregidos}`);
        console.log(`‚ö†Ô∏è Sin asignaci√≥n oficial: ${sinAsignacion}`);
        console.log(`üìã Total procesados: ${estudiantes.length}`);

        console.log('\nüìä ESTADO DESPU√âS DE LA CORRECCI√ìN:');
        console.log('===================================');

        // Mostrar resultado final
        const usuariosActualizados = JSON.parse(localStorage.getItem('smart-student-users'));
        const estudiantesActualizados = usuariosActualizados.filter(u => u.role === 'student');
        
        estudiantesActualizados.forEach((estudiante, index) => {
            console.log(`${index + 1}. ${estudiante.username}: ${JSON.stringify(estudiante.activeCourses)}`);
        });

        console.log('\nüí° PR√ìXIMOS PASOS:');
        console.log('==================');
        console.log('1. Recarga la p√°gina completamente (Ctrl+F5)');
        console.log('2. Verifica los perfiles de Gustavo y Max');
        console.log('3. Deber√≠an mostrar exactamente lo que est√° en Gesti√≥n de Usuarios');

        return true;

    } catch (error) {
        console.error('‚ùå ERROR en correcci√≥n din√°mica:', error);
        return false;
    }
}

function verificarQuedoDinamico() {
    try {
        console.log('\nüîç VERIFICACI√ìN FINAL DE DINAMISMO:');
        console.log('===================================');

        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');

        const estudiantes = users.filter(u => u.role === 'student');
        let todoCorreto = true;

        estudiantes.forEach(estudiante => {
            const asignacion = studentAssignments.find(a => a.studentId === estudiante.id);
            
            if (asignacion) {
                const curso = courses.find(c => c.id === asignacion.courseId);
                const seccion = sections.find(s => s.id === asignacion.sectionId);
                const cursoEsperado = `${curso?.name} - Secci√≥n ${seccion?.name}`;
                
                const perfilActual = estudiante.activeCourses?.[0] || 'Sin curso';
                
                if (perfilActual === cursoEsperado) {
                    console.log(`‚úÖ ${estudiante.username}: DIN√ÅMICO - ${perfilActual}`);
                } else {
                    console.log(`‚ùå ${estudiante.username}: PROBLEMA`);
                    console.log(`   Esperado: ${cursoEsperado}`);
                    console.log(`   Actual: ${perfilActual}`);
                    todoCorreto = false;
                }
            } else {
                const perfilActual = estudiante.activeCourses || [];
                if (perfilActual.length === 0) {
                    console.log(`‚úÖ ${estudiante.username}: CORRECTO - Sin asignaci√≥n oficial`);
                } else {
                    console.log(`‚ùå ${estudiante.username}: Tiene datos sin asignaci√≥n oficial`);
                    todoCorreto = false;
                }
            }
        });

        if (todoCorreto) {
            console.log('\nüéâ ¬°PERFECTO! Todo est√° din√°mico y sincronizado');
        } else {
            console.log('\n‚ö†Ô∏è A√∫n hay problemas. Ejecuta corregirAsignacionesDinamicas() otra vez');
        }

        return todoCorreto;

    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error);
        return false;
    }
}

// CASO ESPEC√çFICO: Verificar Gustavo y Max
function verificarGustavoYMax() {
    try {
        console.log('\nüéØ VERIFICACI√ìN ESPEC√çFICA: GUSTAVO Y MAX');
        console.log('=========================================');

        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');

        ['gustavo', 'max'].forEach(username => {
            const usuario = users.find(u => u.username === username);
            if (!usuario) {
                console.log(`‚ùå ${username}: No encontrado`);
                return;
            }

            const asignacion = studentAssignments.find(a => a.studentId === usuario.id);
            if (!asignacion) {
                console.log(`‚ùå ${username}: Sin asignaci√≥n en gesti√≥n`);
                return;
            }

            const curso = courses.find(c => c.id === asignacion.courseId);
            const seccion = sections.find(s => s.id === asignacion.sectionId);
            
            console.log(`\nüë§ ${username.toUpperCase()}:`);
            console.log(`   Gesti√≥n de Usuarios: ${curso?.name} - Secci√≥n ${seccion?.name}`);
            console.log(`   Perfil muestra: ${JSON.stringify(usuario.activeCourses || [])}`);
            
            const esperado = `${curso?.name} - Secci√≥n ${seccion?.name}`;
            const actual = usuario.activeCourses?.[0];
            
            if (actual === esperado) {
                console.log(`   ‚úÖ CORRECTO - Est√° din√°mico`);
            } else {
                console.log(`   ‚ùå INCORRECTO - Necesita correcci√≥n`);
            }
        });

    } catch (error) {
        console.error('‚ùå Error verificando Gustavo y Max:', error);
    }
}

// Ejecutar correcci√≥n autom√°ticamente
console.log('üöÄ INICIANDO CORRECCI√ìN DIN√ÅMICA...');
corregirAsignacionesDinamicas();

console.log('\nüí° COMANDOS DISPONIBLES:');
console.log('========================');
console.log('- verificarQuedoDinamico() - Verificar que todo est√© din√°mico');
console.log('- verificarGustavoYMax() - Verificar espec√≠ficamente estos usuarios');
console.log('- corregirAsignacionesDinamicas() - Ejecutar correcci√≥n otra vez');
