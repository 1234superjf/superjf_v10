/**
 * üîß SOLUCI√ìN INMEDIATA: Crear Asignaciones de Estudiantes
 * 
 * Este script crea las asignaciones faltantes entre estudiantes, cursos y secciones
 * bas√°ndose en los datos existentes en activeCourses de cada estudiante.
 */

console.log('üîß INICIANDO CREACI√ìN DE ASIGNACIONES DE ESTUDIANTES...');

function crearAsignacionesFaltantes() {
    console.log('\nüîß [CREAR ASIGNACIONES] Procesando asignaciones faltantes...');
    
    try {
        // Obtener datos del sistema
        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        let studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
        
        const students = users.filter(u => u.role === 'student');
        
        console.log(`üìä Datos disponibles:`);
        console.log(`   ‚Ä¢ Estudiantes: ${students.length}`);
        console.log(`   ‚Ä¢ Cursos: ${courses.length}`);
        console.log(`   ‚Ä¢ Secciones: ${sections.length}`);
        console.log(`   ‚Ä¢ Asignaciones existentes: ${studentAssignments.length}`);
        
        let asignacionesCreadas = 0;
        
        students.forEach(student => {
            // Verificar si ya tiene asignaci√≥n
            const existingAssignment = studentAssignments.find(a => a.studentId === student.id);
            if (existingAssignment) {
                console.log(`‚úÖ ${student.displayName || student.username} ya tiene asignaci√≥n`);
                return;
            }
            
            // Buscar curso y secci√≥n bas√°ndose en activeCourses
            if (student.activeCourses && student.activeCourses.length > 0) {
                const activeCourse = student.activeCourses[0]; // "4to B√°sico"
                
                // Buscar el curso por nombre
                const course = courses.find(c => c.name === activeCourse || activeCourse.includes(c.name));
                
                if (course) {
                    // Buscar una secci√≥n disponible para este curso
                    const availableSections = sections.filter(s => s.courseId === course.id);
                    
                    if (availableSections.length > 0) {
                        // Asignar a la primera secci√≥n disponible (o secci√≥n A si existe)
                        let targetSection = availableSections.find(s => s.name === 'A') || availableSections[0];
                        
                        // Crear la asignaci√≥n
                        const newAssignment = {
                            id: `assignment-${student.id}-${Date.now()}`,
                            studentId: student.id,
                            courseId: course.id,
                            sectionId: targetSection.id,
                            createdAt: new Date().toISOString(),
                            createdBy: 'auto-assignment-script'
                        };
                        
                        studentAssignments.push(newAssignment);
                        asignacionesCreadas++;
                        
                        console.log(`‚úÖ Asignaci√≥n creada para ${student.displayName || student.username}:`);
                        console.log(`   ‚Ä¢ Curso: ${course.name}`);
                        console.log(`   ‚Ä¢ Secci√≥n: ${targetSection.name}`);
                        console.log(`   ‚Ä¢ CourseId: ${course.id}`);
                        console.log(`   ‚Ä¢ SectionId: ${targetSection.id}`);
                        
                        // Actualizar datos del estudiante
                        student.sectionName = targetSection.name;
                        student.assignedTeacher = 'admin'; // Temporalmente asignar a admin
                        
                    } else {
                        console.log(`‚ö†Ô∏è ${student.displayName || student.username}: No hay secciones para el curso ${course.name}`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è ${student.displayName || student.username}: No se encontr√≥ curso para "${activeCourse}"`);
                }
            } else {
                console.log(`‚ö†Ô∏è ${student.displayName || student.username}: No tiene activeCourses definido`);
            }
        });
        
        // Guardar los cambios
        localStorage.setItem('smart-student-student-assignments', JSON.stringify(studentAssignments));
        localStorage.setItem('smart-student-users', JSON.stringify(users));
        
        console.log(`\nüéâ COMPLETADO:`);
        console.log(`   ‚Ä¢ Asignaciones creadas: ${asignacionesCreadas}`);
        console.log(`   ‚Ä¢ Total asignaciones ahora: ${studentAssignments.length}`);
        
        if (asignacionesCreadas > 0) {
            console.log('\nüí° SIGUIENTE PASO:');
            console.log('   1. Recarga la p√°gina (F5)');
            console.log('   2. Ve a crear una nueva tarea');
            console.log('   3. Selecciona un curso-secci√≥n');
            console.log('   4. Elige "Estudiantes espec√≠ficos"');
            console.log('   5. ¬°Ahora deber√≠as ver los estudiantes de esa secci√≥n!');
        }
        
        return asignacionesCreadas;
        
    } catch (error) {
        console.error('‚ùå Error al crear asignaciones:', error);
        return 0;
    }
}

// Funci√≥n para verificar las asignaciones despu√©s de crearlas
function verificarAsignaciones() {
    console.log('\nüîç [VERIFICACI√ìN] Verificando asignaciones creadas...');
    
    try {
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        
        const students = users.filter(u => u.role === 'student');
        
        console.log(`üìä Resumen actual:`);
        console.log(`   ‚Ä¢ Total estudiantes: ${students.length}`);
        console.log(`   ‚Ä¢ Total asignaciones: ${studentAssignments.length}`);
        
        studentAssignments.forEach((assignment, index) => {
            const student = students.find(s => s.id === assignment.studentId);
            const course = courses.find(c => c.id === assignment.courseId);
            const section = sections.find(s => s.id === assignment.sectionId);
            
            console.log(`\n   ${index + 1}. üë§ ${student?.displayName || 'Estudiante desconocido'}:`);
            console.log(`      ‚Ä¢ Curso: ${course?.name || 'Curso desconocido'}`);
            console.log(`      ‚Ä¢ Secci√≥n: ${section?.name || 'Secci√≥n desconocida'}`);
            console.log(`      ‚Ä¢ CourseId: ${assignment.courseId}`);
            console.log(`      ‚Ä¢ SectionId: ${assignment.sectionId}`);
        });
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error);
        return false;
    }
}

// Ejecutar autom√°ticamente
console.log('üöÄ Ejecutando creaci√≥n de asignaciones...');
const resultado = crearAsignacionesFaltantes();

if (resultado > 0) {
    console.log('\n‚úÖ ASIGNACIONES CREADAS EXITOSAMENTE');
    console.log('\nüîß FUNCIONES DISPONIBLES:');
    console.log('   ‚Ä¢ crearAsignacionesFaltantes() - Para crear m√°s asignaciones');
    console.log('   ‚Ä¢ verificarAsignaciones() - Para verificar el estado actual');
    console.log('   ‚Ä¢ diagnosticoCompleto() - Para ejecutar el diagn√≥stico completo');
    
    // Verificar autom√°ticamente
    verificarAsignaciones();
} else {
    console.log('\n‚ö†Ô∏è No se crearon asignaciones nuevas');
}
