// üîß PARCHE CR√çTICO: Evaluaciones EN Activo
// Este script debe ejecutarse despu√©s de cargar la p√°gina de evaluaciones

console.log('üîß Aplicando parche para evaluaciones EN activo...');

// 1. Funci√≥n mejorada de detecci√≥n de idioma
function detectLanguageImproved() {
    console.log('üîç PARCHE: Detecci√≥n mejorada de idioma iniciada');
    
    // Verificar m√∫ltiples fuentes
    const sources = {
        localStorage: localStorage.getItem('smart-student-lang'),
        documentLang: document.documentElement.lang,
        context: window.languageContext?.language,
        urlParams: new URLSearchParams(window.location.search).get('lang')
    };
    
    console.log('üìä PARCHE: Fuentes de idioma:', sources);
    
    // Buscar toggle EN activo de manera m√°s robusta
    let enToggleActive = false;
    const allElements = document.querySelectorAll('*');
    
    for (let element of allElements) {
        const text = element.textContent?.trim();
        const rect = element.getBoundingClientRect();
        
        // Buscar EN en la parte superior derecha
        if (text === 'EN' && rect.top < 100 && rect.right > window.innerWidth - 300) {
            // Verificar si est√° activo usando m√∫ltiples m√©todos
            const isActive = element.classList.contains('active') ||
                           element.getAttribute('data-state') === 'checked' ||
                           element.getAttribute('aria-checked') === 'true' ||
                           element.parentElement?.getAttribute('data-state') === 'checked' ||
                           element.closest('[data-state="checked"]') !== null;
            
            if (isActive) {
                enToggleActive = true;
                console.log('‚úÖ PARCHE: Toggle EN activo encontrado', element);
                break;
            }
        }
    }
    
    // Determinar idioma final
    const shouldUseEnglish = enToggleActive || sources.localStorage === 'en' || sources.documentLang === 'en';
    const finalLanguage = shouldUseEnglish ? 'en' : 'es';
    
    console.log(`üéØ PARCHE: Idioma final determinado: ${finalLanguage}`);
    console.log(`üîç PARCHE: Raz√≥n: ${enToggleActive ? 'Toggle EN activo' : 'Configuraci√≥n localStorage/document'}`);
    
    return finalLanguage;
}

// 2. Funci√≥n mejorada de generaci√≥n de evaluaci√≥n
function improvedEvaluationGeneration() {
    console.log('üìù PARCHE: Funci√≥n mejorada de generaci√≥n iniciada');
    
    // Interceptar el handleCreateEvaluation original
    if (window.handleCreateEvaluation) {
        const originalFunction = window.handleCreateEvaluation;
        
        window.handleCreateEvaluation = async function(...args) {
            console.log('üöÄ PARCHE: Interceptando handleCreateEvaluation');
            
            try {
                // Aplicar detecci√≥n mejorada de idioma
                const language = detectLanguageImproved();
                
                // Forzar sincronizaci√≥n antes de continuar
                localStorage.setItem('smart-student-lang', language);
                document.documentElement.lang = language;
                
                console.log(`üîÑ PARCHE: Idioma sincronizado a ${language}`);
                
                // Llamar funci√≥n original con timeout aumentado
                const timeoutId = setTimeout(() => {
                    console.log('‚è±Ô∏è PARCHE: Timeout de 30 segundos alcanzado');
                    alert('La generaci√≥n de evaluaci√≥n est√° tomando m√°s tiempo de lo normal. Por favor, intenta nuevamente.');
                }, 30000);
                
                const result = await originalFunction.apply(this, args);
                clearTimeout(timeoutId);
                
                console.log('‚úÖ PARCHE: Generaci√≥n completada exitosamente');
                return result;
                
            } catch (error) {
                console.error('‚ùå PARCHE: Error en generaci√≥n:', error);
                
                // Mostrar error m√°s descriptivo al usuario
                const errorMessage = `Error al generar evaluaci√≥n: ${error.message || 'Error desconocido'}`;
                alert(errorMessage);
                
                // Intentar fallback
                console.log('üîÑ PARCHE: Intentando m√©todo de fallback...');
                return await fallbackEvaluationGeneration();
            }
        };
        
        console.log('‚úÖ PARCHE: handleCreateEvaluation interceptado exitosamente');
    }
}

// 3. Funci√≥n de fallback para generaci√≥n
async function fallbackEvaluationGeneration() {
    console.log('üÜò PARCHE: Ejecutando generaci√≥n de fallback');
    
    const language = detectLanguageImproved();
    
    try {
        // Par√°metros b√°sicos de fallback
        const params = {
            bookTitle: 'Ciencias Naturales',
            topic: 'Evaluaci√≥n General',
            language: language,
            questionCount: 15,
            timeLimit: 120
        };
        
        console.log('üì° PARCHE: Llamando API de fallback con:', params);
        
        const response = await fetch('/api/generate-dynamic-evaluation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Fallback-Mode': 'true'
            },
            body: JSON.stringify(params)
        });
        
        if (!response.ok) {
            throw new Error(`API Error: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ PARCHE: Fallback exitoso');
        
        return data;
        
    } catch (error) {
        console.error('‚ùå PARCHE: Fallback tambi√©n fall√≥:', error);
        alert('No se pudo generar la evaluaci√≥n. Por favor, revisa tu conexi√≥n e intenta nuevamente.');
        throw error;
    }
}

// 4. Funci√≥n para aplicar todas las correcciones
function applyEvaluationPatches() {
    console.log('üîß PARCHE: Aplicando todas las correcciones...');
    
    // Correcci√≥n 1: Mejorar detecci√≥n de idioma
    improvedEvaluationGeneration();
    
    // Correcci√≥n 2: Interceptar clicks en botones
    document.addEventListener('click', function(event) {
        const target = event.target;
        const buttonText = target.textContent?.trim();
        
        if (buttonText === 'Crear Evaluaci√≥n' || buttonText === 'Create Evaluation' || 
            buttonText === 'Repetir Evaluaci√≥n' || buttonText === 'Retake Evaluation') {
            
            console.log(`üéØ PARCHE: Click interceptado en "${buttonText}"`);
            
            // Verificar estado antes de continuar
            const language = detectLanguageImproved();
            console.log(`üåç PARCHE: Idioma detectado para "${buttonText}": ${language}`);
            
            // Mostrar indicador de carga mejorado
            const loadingOverlay = document.createElement('div');
            loadingOverlay.innerHTML = `
                <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                           background: rgba(0,0,0,0.7); z-index: 9999; display: flex; 
                           align-items: center; justify-content: center; color: white;">
                    <div style="text-align: center;">
                        <div style="font-size: 18px; margin-bottom: 10px;">
                            Generando evaluaci√≥n en ${language === 'en' ? 'ingl√©s' : 'espa√±ol'}...
                        </div>
                        <div style="font-size: 14px; opacity: 0.8;">
                            Por favor espera, esto puede tomar hasta 30 segundos
                        </div>
                    </div>
                </div>
            `;
            loadingOverlay.id = 'evaluation-loading-overlay';
            document.body.appendChild(loadingOverlay);
            
            // Remover overlay despu√©s de 35 segundos como m√°ximo
            setTimeout(() => {
                const overlay = document.getElementById('evaluation-loading-overlay');
                if (overlay) {
                    overlay.remove();
                }
            }, 35000);
        }
    });
    
    // Correcci√≥n 3: Limpiar overlays en casos de √©xito
    const originalFetch = window.fetch;
    window.fetch = async function(...args) {
        const result = await originalFetch.apply(this, args);
        
        // Si fue exitoso, limpiar overlay
        if (result.ok && args[0]?.includes('/api/generate-dynamic-evaluation')) {
            setTimeout(() => {
                const overlay = document.getElementById('evaluation-loading-overlay');
                if (overlay) {
                    overlay.remove();
                }
            }, 1000);
        }
        
        return result;
    };
    
    console.log('‚úÖ PARCHE: Todas las correcciones aplicadas');
}

// 5. Funci√≥n de diagn√≥stico r√°pido
function quickDiagnosis() {
    console.log('ü©∫ PARCHE: Diagn√≥stico r√°pido del sistema');
    
    const results = {
        userLogged: !!localStorage.getItem('smart-student-user'),
        language: localStorage.getItem('smart-student-lang'),
        onEvaluationPage: window.location.pathname.includes('evaluacion'),
        hasCreateButton: !!document.querySelector('button[data-testid="create-evaluation"], button:contains("Crear Evaluaci√≥n")'),
        apiReachable: 'testing...'
    };
    
    console.table(results);
    
    // Test r√°pido de API
    fetch('/api/generate-dynamic-evaluation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ test: true })
    }).then(response => {
        console.log(`üì° PARCHE: API alcanzable: ${response.status}`);
    }).catch(error => {
        console.log(`‚ùå PARCHE: API no alcanzable: ${error.message}`);
    });
    
    return results;
}

// Aplicar parches al cargar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', applyEvaluationPatches);
} else {
    applyEvaluationPatches();
}

// Ejecutar diagn√≥stico despu√©s de 2 segundos
setTimeout(quickDiagnosis, 2000);

// Exponer funciones globalmente para debug manual
window.evaluationPatch = {
    applyPatches: applyEvaluationPatches,
    detectLanguage: detectLanguageImproved,
    diagnose: quickDiagnosis,
    fallbackGeneration: fallbackEvaluationGeneration
};

console.log('üéâ PARCHE: Sistema de correcciones cargado completamente');
console.log('üí° PARCHE: Usa window.evaluationPatch para funciones de debug');
