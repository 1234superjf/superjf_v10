/**
 * DIAGN√ìSTICO ESPEC√çFICO: Problema con Estudiantes Espec√≠ficos en Creaci√≥n de Tareas
 * 
 * Este script diagn√≥stica paso a paso por qu√© no aparecen estudiantes al crear tareas
 */

console.log('üîç DIAGN√ìSTICO COMPLETO: Estudiantes Espec√≠ficos en Tareas');
console.log('========================================================');

function diagnosticarProblemaEstudiantesEspecificos() {
    try {
        // 1. Verificar autenticaci√≥n
        const auth = JSON.parse(localStorage.getItem('smart-student-auth') || '{}');
        const currentUser = auth.user;
        
        console.log('\nüîê PASO 1: VERIFICAR AUTENTICACI√ìN');
        console.log('==================================');
        
        if (!currentUser) {
            console.log('‚ùå ERROR: No hay usuario logueado');
            console.log('üí° SOLUCI√ìN: Haz login primero en http://localhost:9002');
            return false;
        }
        
        console.log(`‚úÖ Usuario logueado: ${currentUser.displayName || currentUser.username}`);
        console.log(`   ‚Ä¢ Rol: ${currentUser.role}`);
        console.log(`   ‚Ä¢ ID: ${currentUser.id}`);
        console.log(`   ‚Ä¢ Username: ${currentUser.username}`);
        
        if (currentUser.role !== 'teacher' && currentUser.role !== 'profesor') {
            console.log('‚ùå ERROR: El usuario no es un profesor');
            console.log('üí° SOLUCI√ìN: Haz login con una cuenta de profesor');
            return false;
        }

        // 2. Cargar todos los datos
        console.log('\nüìä PASO 2: CARGAR DATOS DEL SISTEMA');
        console.log('===================================');
        
        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
        const teacherAssignments = JSON.parse(localStorage.getItem('smart-student-teacher-assignments') || '[]');
        
        console.log(`   ‚Ä¢ Usuarios totales: ${users.length}`);
        console.log(`   ‚Ä¢ Cursos: ${courses.length}`);
        console.log(`   ‚Ä¢ Secciones: ${sections.length}`);
        console.log(`   ‚Ä¢ Asignaciones estudiantes: ${studentAssignments.length}`);
        console.log(`   ‚Ä¢ Asignaciones profesores: ${teacherAssignments.length}`);
        
        const estudiantes = users.filter(u => u.role === 'student' || u.role === 'estudiante');
        const profesores = users.filter(u => u.role === 'teacher' || u.role === 'profesor');
        
        console.log(`   ‚Ä¢ Estudiantes: ${estudiantes.length}`);
        console.log(`   ‚Ä¢ Profesores: ${profesores.length}`);

        // 3. Verificar asignaciones del profesor actual
        console.log('\nüë®‚Äçüè´ PASO 3: VERIFICAR ASIGNACIONES DEL PROFESOR ACTUAL');
        console.log('====================================================');
        
        const asignacionesProfesor = teacherAssignments.filter(ta => 
            ta.teacherId === currentUser.id || ta.teacherUsername === currentUser.username
        );
        
        console.log(`   ‚Ä¢ Asignaciones encontradas: ${asignacionesProfesor.length}`);
        
        if (asignacionesProfesor.length === 0) {
            console.log('‚ùå PROBLEMA CR√çTICO: El profesor NO tiene asignaciones');
            console.log('üí° SOLUCI√ìN: El profesor debe ser asignado a secciones en Admin > Gesti√≥n de Usuarios > Asignaciones');
            console.log('\nüîß Para solucionarlo autom√°ticamente, ejecuta:');
            console.log('   crearAsignacionesProfesorAutomaticas()');
            return false;
        }
        
        console.log('‚úÖ El profesor tiene asignaciones:');
        asignacionesProfesor.forEach((asig, index) => {
            const seccion = sections.find(s => s.id === asig.sectionId);
            const curso = seccion ? courses.find(c => c.id === seccion.courseId) : null;
            
            console.log(`   ${index + 1}. ${curso?.name || 'Curso desconocido'} - Secci√≥n ${seccion?.name || 'N/A'}: ${asig.subjectName}`);
        });

        // 4. Verificar estudiantes en las secciones del profesor
        console.log('\nüë• PASO 4: VERIFICAR ESTUDIANTES EN LAS SECCIONES DEL PROFESOR');
        console.log('==============================================================');
        
        const seccionesDelProfesor = [...new Set(asignacionesProfesor.map(a => a.sectionId))];
        let totalEstudiantesEnSecciones = 0;
        
        seccionesDelProfesor.forEach(sectionId => {
            const seccion = sections.find(s => s.id === sectionId);
            const curso = seccion ? courses.find(c => c.id === seccion.courseId) : null;
            
            console.log(`\nüè´ Secci√≥n: ${curso?.name || 'Curso desconocido'} - Secci√≥n ${seccion?.name || 'N/A'}`);
            console.log(`   ‚Ä¢ ID de secci√≥n: ${sectionId}`);
            
            const estudiantesEnEstaSeccion = studentAssignments.filter(sa => sa.sectionId === sectionId);
            console.log(`   ‚Ä¢ Estudiantes asignados: ${estudiantesEnEstaSeccion.length}`);
            
            if (estudiantesEnEstaSeccion.length === 0) {
                console.log('   ‚ùå PROBLEMA: No hay estudiantes asignados a esta secci√≥n');
            } else {
                console.log('   ‚úÖ Estudiantes encontrados:');
                estudiantesEnEstaSeccion.forEach((sa, index) => {
                    const estudiante = users.find(u => u.id === sa.studentId);
                    console.log(`      ${index + 1}. ${estudiante?.username || 'Estudiante desconocido'} (${estudiante?.displayName || 'Sin nombre'})`);
                });
                totalEstudiantesEnSecciones += estudiantesEnEstaSeccion.length;
            }
        });
        
        if (totalEstudiantesEnSecciones === 0) {
            console.log('\n‚ùå PROBLEMA CR√çTICO: No hay estudiantes asignados a las secciones del profesor');
            console.log('üí° SOLUCI√ìN: Los estudiantes deben ser asignados a secciones en Admin > Gesti√≥n de Usuarios > Asignaciones');
            console.log('\nüîß Para solucionarlo autom√°ticamente, ejecuta:');
            console.log('   asignarEstudiantesASeccionesAutomaticamente()');
            return false;
        }

        // 5. Simular la funci√≥n getStudentsForCourse
        console.log('\nüéØ PASO 5: SIMULAR FUNCI√ìN getStudentsForCourse');
        console.log('===============================================');
        
        // Obtener cursos disponibles para el profesor (simulando getAvailableCoursesWithNames)
        const cursosDisponibles = [];
        asignacionesProfesor.forEach(asig => {
            const seccion = sections.find(s => s.id === asig.sectionId);
            const curso = seccion ? courses.find(c => c.id === seccion.courseId) : null;
            
            if (curso && seccion) {
                const cursoSeccionId = `${curso.id}-${seccion.id}`;
                const existe = cursosDisponibles.find(c => c.id === cursoSeccionId);
                
                if (!existe) {
                    cursosDisponibles.push({
                        id: cursoSeccionId,
                        name: `${curso.name} Secci√≥n ${seccion.name}`,
                        courseId: curso.id,
                        sectionId: seccion.id,
                        originalCourseName: curso.name,
                        sectionName: seccion.name
                    });
                }
            }
        });
        
        console.log(`   ‚Ä¢ Cursos disponibles para crear tareas: ${cursosDisponibles.length}`);
        
        if (cursosDisponibles.length === 0) {
            console.log('‚ùå PROBLEMA: No se pueden generar cursos disponibles');
            return false;
        }
        
        console.log('‚úÖ Cursos disponibles:');
        cursosDisponibles.forEach((curso, index) => {
            console.log(`   ${index + 1}. ${curso.name} (ID: ${curso.id})`);
        });
        
        // 6. Probar getStudentsForCourse para cada curso disponible
        console.log('\nüß™ PASO 6: PROBAR OBTENER ESTUDIANTES PARA CADA CURSO');
        console.log('====================================================');
        
        let todoFunciona = true;
        
        cursosDisponibles.forEach((curso, index) => {
            console.log(`\n   ${index + 1}. Probando curso: ${curso.name}`);
            console.log(`      ‚Ä¢ Course ID: ${curso.courseId}`);
            console.log(`      ‚Ä¢ Section ID: ${curso.sectionId}`);
            
            // Verificar que el profesor est√° asignado a esta secci√≥n
            const profesorAsignadoASeccion = teacherAssignments.some(ta => 
                (ta.teacherId === currentUser.id || ta.teacherUsername === currentUser.username) && 
                ta.sectionId === curso.sectionId
            );
            
            console.log(`      ‚Ä¢ ¬øProfesor asignado a secci√≥n?: ${profesorAsignadoASeccion ? '‚úÖ' : '‚ùå'}`);
            
            if (!profesorAsignadoASeccion) {
                console.log(`      ‚ùå PROBLEMA: Profesor no asignado a secci√≥n ${curso.sectionId}`);
                todoFunciona = false;
                return;
            }
            
            // Obtener estudiantes de esta secci√≥n
            const estudiantesEnSeccion = studentAssignments
                .filter(sa => sa.sectionId === curso.sectionId)
                .map(sa => sa.studentId);
            
            console.log(`      ‚Ä¢ Estudiantes en secci√≥n: ${estudiantesEnSeccion.length}`);
            
            if (estudiantesEnSeccion.length === 0) {
                console.log(`      ‚ùå PROBLEMA: No hay estudiantes en secci√≥n ${curso.sectionId}`);
                todoFunciona = false;
                return;
            }
            
            // Obtener datos completos de estudiantes
            const estudiantesCompletos = users.filter(u => 
                (u.role === 'student' || u.role === 'estudiante') && 
                estudiantesEnSeccion.includes(u.id)
            );
            
            console.log(`      ‚Ä¢ Estudiantes completos encontrados: ${estudiantesCompletos.length}`);
            
            if (estudiantesCompletos.length === 0) {
                console.log(`      ‚ùå PROBLEMA: No se pudieron obtener datos de estudiantes`);
                todoFunciona = false;
                return;
            }
            
            console.log(`      ‚úÖ √âXITO: ${estudiantesCompletos.length} estudiantes disponibles para tareas`);
            estudiantesCompletos.forEach((est, idx) => {
                console.log(`         ${idx + 1}. ${est.username} (${est.displayName || est.name})`);
            });
        });

        // 7. Resultado final
        console.log('\nüéâ RESULTADO FINAL DEL DIAGN√ìSTICO');
        console.log('==================================');
        
        if (todoFunciona) {
            console.log('‚úÖ TODO EST√Å CONFIGURADO CORRECTAMENTE');
            console.log('üí° Si a√∫n no aparecen estudiantes en el selector:');
            console.log('   1. Recarga la p√°gina completamente (Ctrl+F5)');
            console.log('   2. Verifica que est√°s seleccionando el curso correcto');
            console.log('   3. Verifica que est√°s seleccionando "Estudiantes espec√≠ficos"');
            console.log('   4. Abre la consola del navegador para ver mensajes de debug');
        } else {
            console.log('‚ùå PROBLEMAS ENCONTRADOS EN LA CONFIGURACI√ìN');
            console.log('üîß Ejecuta las funciones de correcci√≥n sugeridas arriba');
        }

        return todoFunciona;

    } catch (error) {
        console.error('‚ùå ERROR durante el diagn√≥stico:', error);
        return false;
    }
}

// Funci√≥n para crear asignaciones de profesor autom√°ticamente
function crearAsignacionesProfesorAutomaticas() {
    console.log('\nüîß CREANDO ASIGNACIONES DE PROFESOR AUTOM√ÅTICAMENTE...');
    
    const auth = JSON.parse(localStorage.getItem('smart-student-auth') || '{}');
    const currentUser = auth.user;
    
    if (!currentUser || (currentUser.role !== 'teacher' && currentUser.role !== 'profesor')) {
        console.log('‚ùå Error: Necesitas estar logueado como profesor');
        return false;
    }
    
    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
    let teacherAssignments = JSON.parse(localStorage.getItem('smart-student-teacher-assignments') || '[]');
    
    // Materias b√°sicas
    const materiasBasicas = [
        'Matem√°ticas',
        'Lenguaje y Comunicaci√≥n', 
        'Ciencias Naturales',
        'Historia, Geograf√≠a y Ciencias Sociales'
    ];
    
    // Cursos t√≠picos
    const cursosComunes = ['4to B√°sico', '5to B√°sico', '6to B√°sico'];
    
    let asignacionesCreadas = 0;
    
    cursosComunes.forEach(nombreCurso => {
        const curso = courses.find(c => c.name === nombreCurso);
        if (curso) {
            const secciones = sections.filter(s => s.courseId === curso.id);
            
            secciones.forEach(seccion => {
                materiasBasicas.forEach(materia => {
                    // Verificar si ya existe la asignaci√≥n
                    const existeAsignacion = teacherAssignments.some(ta => 
                        (ta.teacherId === currentUser.id || ta.teacherUsername === currentUser.username) &&
                        ta.sectionId === seccion.id && 
                        ta.subjectName === materia
                    );
                    
                    if (!existeAsignacion) {
                        teacherAssignments.push({
                            id: `teacher-auto-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                            teacherId: currentUser.id,
                            teacherUsername: currentUser.username,
                            sectionId: seccion.id,
                            subjectName: materia,
                            assignedAt: new Date().toISOString(),
                            autoCreated: true
                        });
                        
                        console.log(`   ‚ûï ${nombreCurso} - Secci√≥n ${seccion.name}: ${materia}`);
                        asignacionesCreadas++;
                    }
                });
            });
        }
    });
    
    if (asignacionesCreadas > 0) {
        localStorage.setItem('smart-student-teacher-assignments', JSON.stringify(teacherAssignments));
        console.log(`‚úÖ Creadas ${asignacionesCreadas} asignaciones de profesor`);
        console.log('üîÑ Ejecuta diagnosticarProblemaEstudiantesEspecificos() nuevamente');
    } else {
        console.log('‚ÑπÔ∏è No se necesitaban crear asignaciones adicionales');
    }
    
    return asignacionesCreadas > 0;
}

// Funci√≥n para asignar estudiantes a secciones autom√°ticamente
function asignarEstudiantesASeccionesAutomaticamente() {
    console.log('\nüîß ASIGNANDO ESTUDIANTES A SECCIONES AUTOM√ÅTICAMENTE...');
    
    const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
    let studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
    
    const estudiantes = users.filter(u => u.role === 'student' || u.role === 'estudiante');
    
    let asignacionesCreadas = 0;
    
    estudiantes.forEach(estudiante => {
        // Verificar si ya tiene asignaci√≥n
        const tieneAsignacion = studentAssignments.some(sa => sa.studentId === estudiante.id);
        
        if (!tieneAsignacion) {
            // Asignar a 4to B√°sico Secci√≥n A por defecto
            const curso = courses.find(c => c.name === '4to B√°sico');
            const seccion = sections.find(s => s.courseId === curso?.id && s.name === 'A');
            
            if (curso && seccion) {
                studentAssignments.push({
                    id: `student-auto-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    studentId: estudiante.id,
                    courseId: curso.id,
                    sectionId: seccion.id,
                    createdAt: new Date().toISOString(),
                    autoAssigned: true
                });
                
                // Actualizar perfil del estudiante
                estudiante.activeCourses = [`${curso.name} - Secci√≥n ${seccion.name}`];
                
                console.log(`   ‚ûï ${estudiante.username} -> ${curso.name} - Secci√≥n ${seccion.name}`);
                asignacionesCreadas++;
            }
        }
    });
    
    if (asignacionesCreadas > 0) {
        localStorage.setItem('smart-student-users', JSON.stringify(users));
        localStorage.setItem('smart-student-student-assignments', JSON.stringify(studentAssignments));
        
        console.log(`‚úÖ Asignados ${asignacionesCreadas} estudiantes a secciones`);
        console.log('üîÑ Ejecuta diagnosticarProblemaEstudiantesEspecificos() nuevamente');
    } else {
        console.log('‚ÑπÔ∏è Todos los estudiantes ya tienen asignaciones');
    }
    
    return asignacionesCreadas > 0;
}

// Ejecutar diagn√≥stico autom√°ticamente
console.log('üöÄ Ejecutando diagn√≥stico autom√°tico...\n');
const resultado = diagnosticarProblemaEstudiantesEspecificos();

// Hacer funciones disponibles globalmente
window.diagnosticarProblemaEstudiantesEspecificos = diagnosticarProblemaEstudiantesEspecificos;
window.crearAsignacionesProfesorAutomaticas = crearAsignacionesProfesorAutomaticas;
window.asignarEstudiantesASeccionesAutomaticamente = asignarEstudiantesASeccionesAutomaticamente;

console.log('\nüéØ FUNCIONES DISPONIBLES:');
console.log('=========================');
console.log('‚Ä¢ diagnosticarProblemaEstudiantesEspecificos() - Ejecutar diagn√≥stico completo');
console.log('‚Ä¢ crearAsignacionesProfesorAutomaticas() - Crear asignaciones de profesor');
console.log('‚Ä¢ asignarEstudiantesASeccionesAutomaticamente() - Asignar estudiantes a secciones');
