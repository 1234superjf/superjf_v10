/**
 * üîÑ SINCRONIZACI√ìN AUTOM√ÅTICA DESPU√âS DE CAMBIOS EN GESTI√ìN DE USUARIOS
 * 
 * Este script detecta y sincroniza autom√°ticamente los cambios hechos en:
 * - Gesti√≥n de Usuarios ‚Üí Asignaciones de estudiantes
 * - Actualiza inmediatamente la pesta√±a Tareas
 */

console.log('üîÑ SINCRONIZACI√ìN AUTOM√ÅTICA POST-CAMBIOS...');

function sincronizarDespuesDeCambios() {
    console.log('\n‚ö° [SYNC] Detectando y sincronizando cambios recientes...');
    
    try {
        // 1. Cargar datos actuales
        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
        
        const students = users.filter(u => u.role === 'student');
        
        console.log('üìä [ESTADO ACTUAL] Antes de sincronizaci√≥n:');
        console.log(`   ‚Ä¢ Total estudiantes: ${students.length}`);
        console.log(`   ‚Ä¢ Total asignaciones: ${studentAssignments.length}`);
        
        // 2. Mostrar estado actual de 5to B√°sico (que mencionaste)
        console.log('\nüìö [5TO B√ÅSICO] Estado actual:');
        const quinto = courses.find(c => c.name === '5to B√°sico');
        if (quinto) {
            const seccionesQuinto = sections.filter(s => s.courseId === quinto.id);
            seccionesQuinto.forEach(seccion => {
                const estudiantesEnSeccion = studentAssignments
                    .filter(a => a.courseId === quinto.id && a.sectionId === seccion.id)
                    .map(a => {
                        const student = students.find(s => s.id === a.studentId);
                        return student ? (student.displayName || student.username) : 'Desconocido';
                    });
                
                console.log(`   üìñ Secci√≥n ${seccion.name}: ${estudiantesEnSeccion.length} estudiantes`);
                estudiantesEnSeccion.forEach(nombre => {
                    console.log(`      ‚Ä¢ ${nombre}`);
                });
            });
        }
        
        // 3. Sincronizar datos de users con assignments (la clave del problema)
        let cambiosRealizados = 0;
        
        console.log('\nüîÑ [SINCRONIZACI√ìN] Actualizando datos de usuarios...');
        
        students.forEach(student => {
            const assignmentsForStudent = studentAssignments.filter(a => a.studentId === student.id);
            
            // Calcular nuevos activeCourses basado en asignaciones reales
            const newActiveCourses = assignmentsForStudent.map(assignment => {
                const course = courses.find(c => c.id === assignment.courseId);
                const section = sections.find(s => s.id === assignment.sectionId);
                return `${course?.name || 'Curso'} - Secci√≥n ${section?.name || 'A'}`;
            });
            
            // Actualizar sectionName con la primera secci√≥n
            let newSectionName = null;
            if (assignmentsForStudent.length > 0) {
                const firstSection = sections.find(s => s.id === assignmentsForStudent[0].sectionId);
                newSectionName = firstSection?.name || null;
            }
            
            // Comparar y actualizar si hay cambios
            const currentCourses = JSON.stringify(student.activeCourses || []);
            const newCoursesStr = JSON.stringify(newActiveCourses);
            const currentSection = student.sectionName;
            
            if (currentCourses !== newCoursesStr || currentSection !== newSectionName) {
                student.activeCourses = newActiveCourses;
                student.sectionName = newSectionName;
                
                cambiosRealizados++;
                console.log(`‚úÖ ACTUALIZADO: ${student.displayName || student.username}`);
                console.log(`   Cursos: ${currentCourses} ‚Üí ${newCoursesStr}`);
                console.log(`   Secci√≥n: "${currentSection}" ‚Üí "${newSectionName}"`);
            }
        });
        
        // 4. Guardar cambios si los hubo
        if (cambiosRealizados > 0) {
            localStorage.setItem('smart-student-users', JSON.stringify(users));
            console.log(`\nüíæ [GUARDADO] ${cambiosRealizados} estudiantes actualizados`);
        } else {
            console.log('\n‚úÖ [OK] Los datos ya estaban sincronizados');
        }
        
        // 5. Actualizar timestamps y disparar eventos
        const timestamp = new Date().toISOString();
        localStorage.setItem('smart-student-last-sync', timestamp);
        localStorage.setItem('smart-student-last-modified', timestamp);
        
        // 6. Disparar eventos para React
        const storageEvent = new StorageEvent('storage', {
            key: 'smart-student-users',
            newValue: JSON.stringify(users),
            storageArea: localStorage
        });
        window.dispatchEvent(storageEvent);
        
        const customEvents = [
            'smart-student-refresh',
            'force-refresh',
            'component-update',
            'student-assignments-changed'
        ];
        
        customEvents.forEach(eventName => {
            window.dispatchEvent(new CustomEvent(eventName, {
                detail: { 
                    timestamp: Date.now(),
                    source: 'gestion-usuarios-sync',
                    changes: cambiosRealizados
                }
            }));
        });
        
        console.log(`\nüéØ [EVENTOS] ${customEvents.length} eventos de actualizaci√≥n disparados`);
        
        return { success: true, changes: cambiosRealizados };
        
    } catch (error) {
        console.error('‚ùå Error en sincronizaci√≥n:', error);
        return { success: false, error };
    }
}

// Funci√≥n para mostrar el estado final despu√©s de la sincronizaci√≥n
function mostrarEstadoFinalCompleto() {
    console.log('\nüìã [ESTADO FINAL] Despu√©s de sincronizaci√≥n:');
    
    const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
    const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
    
    const students = users.filter(u => u.role === 'student');
    
    // Mostrar agrupaci√≥n por curso-secci√≥n
    const agrupacion = {};
    
    studentAssignments.forEach(assignment => {
        const student = students.find(s => s.id === assignment.studentId);
        const course = courses.find(c => c.id === assignment.courseId);
        const section = sections.find(s => s.id === assignment.sectionId);
        
        if (student && course && section) {
            const key = `${course.name} - Secci√≥n ${section.name}`;
            if (!agrupacion[key]) {
                agrupacion[key] = [];
            }
            agrupacion[key].push(student.displayName || student.username);
        }
    });
    
    console.log('\nüéØ [DISTRIBUCI√ìN ACTUALIZADA]:');
    Object.keys(agrupacion).sort().forEach(grupo => {
        console.log(`\nüìö ${grupo}:`);
        agrupacion[grupo].forEach(nombre => {
            console.log(`   ‚Ä¢ ${nombre}`);
        });
    });
    
    // Verificar datos espec√≠ficos de usuarios
    console.log('\nüë• [DATOS EN USERS] Verificaci√≥n:');
    students.forEach(student => {
        console.log(`\nüë§ ${student.displayName || student.username}:`);
        console.log(`   ‚Ä¢ activeCourses: ${JSON.stringify(student.activeCourses || [])}`);
        console.log(`   ‚Ä¢ sectionName: "${student.sectionName || 'null'}"`);
    });
}

// Funci√≥n para forzar actualizaci√≥n del componente React
function forzarActualizacionComponente() {
    console.log('\nüîÑ [REACT] Forzando actualizaci√≥n de componente...');
    
    // Intentar m√∫ltiples m√©todos de actualizaci√≥n
    
    // 1. Eventos de formulario
    const selects = document.querySelectorAll('select');
    selects.forEach(select => {
        select.dispatchEvent(new Event('change', { bubbles: true }));
        select.dispatchEvent(new Event('input', { bubbles: true }));
    });
    
    // 2. Clicks en elementos activos
    const activeElements = document.querySelectorAll('[data-course], [data-section]');
    activeElements.forEach(el => {
        el.dispatchEvent(new Event('click', { bubbles: true }));
    });
    
    // 3. Focus/blur para triggear validaci√≥n
    const inputs = document.querySelectorAll('input, select');
    inputs.forEach(input => {
        input.dispatchEvent(new Event('focus'));
        input.dispatchEvent(new Event('blur'));
    });
    
    console.log(`   ‚úÖ ${selects.length} selects actualizados`);
    console.log(`   ‚úÖ ${activeElements.length} elementos activos actualizados`);
    console.log(`   ‚úÖ ${inputs.length} inputs refrescados`);
    
    console.log('\nüí° [SIGUIENTE PASO]:');
    console.log('   1. Ve a la pesta√±a "Tareas"');
    console.log('   2. Selecciona "5to B√°sico" en el curso');
    console.log('   3. Cambia entre secciones A y B');
    console.log('   4. En "Estudiantes espec√≠ficos" ahora deber√≠as ver solo los de esa secci√≥n');
    console.log('\n‚ö†Ô∏è  Si a√∫n no se actualiza, recarga la p√°gina (F5)');
}

// Ejecutar sincronizaci√≥n autom√°tica
console.log('üöÄ Ejecutando sincronizaci√≥n autom√°tica...');
const resultado = sincronizarDespuesDeCambios();

if (resultado.success) {
    console.log('\n‚úÖ SINCRONIZACI√ìN COMPLETADA');
    console.log(`   üìä Cambios realizados: ${resultado.changes}`);
    
    // Mostrar estado final
    mostrarEstadoFinalCompleto();
    
    // Forzar actualizaci√≥n de componente
    forzarActualizacionComponente();
    
} else {
    console.log('\n‚ùå ERROR en sincronizaci√≥n');
    console.error('   Detalles:', resultado.error);
}

// Hacer funciones disponibles globalmente
window.sincronizarDespuesDeCambios = sincronizarDespuesDeCambios;
window.mostrarEstadoFinalCompleto = mostrarEstadoFinalCompleto;
window.forzarActualizacionComponente = forzarActualizacionComponente;

console.log('\nüõ†Ô∏è [FUNCIONES DISPONIBLES]:');
console.log('   ‚Ä¢ sincronizarDespuesDeCambios() - Para sincronizar de nuevo');
console.log('   ‚Ä¢ mostrarEstadoFinalCompleto() - Para ver distribuci√≥n actual');
console.log('   ‚Ä¢ forzarActualizacionComponente() - Para actualizar React');
