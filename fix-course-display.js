// üîß Script de Correcci√≥n - Mostrar Curso y Secci√≥n en lugar de ID
// Este script corrige el problema donde se muestra el ID del curso en lugar del nombre

console.log('üîß Corrigiendo visualizaci√≥n de curso y secci√≥n...');

function fixCourseDisplayInNotifications() {
    try {
        // 1. Obtener datos necesarios
        const notifications = JSON.parse(localStorage.getItem('smart-student-task-notifications') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        const currentUser = JSON.parse(localStorage.getItem('smart-student-user') || '{}');

        console.log('üìä Estado inicial:');
        console.log(`   Usuario: ${currentUser.username} (${currentUser.role})`);
        console.log(`   Notificaciones: ${notifications.length}`);
        console.log(`   Cursos: ${courses.length}`);
        console.log(`   Secciones: ${sections.length}`);

        // 2. Crear funci√≥n para obtener nombre del curso
        function getCourseNameById(courseId) {
            console.log(`üîç Buscando curso para ID: ${courseId}`);
            
            // El courseId puede ser un ID compuesto: cursoId-seccionId
            if (courseId && courseId.includes('-')) {
                const parts = courseId.split('-');
                if (parts.length >= 2) {
                    const cursoId = parts[0];
                    const seccionId = parts[1];
                    
                    console.log(`   Curso ID: ${cursoId}`);
                    console.log(`   Secci√≥n ID: ${seccionId}`);
                    
                    // Buscar curso
                    const curso = courses.find(c => c.id === cursoId);
                    const seccion = sections.find(s => s.id === seccionId);
                    
                    if (curso && seccion) {
                        const displayName = `${curso.name} ${seccion.name}`;
                        console.log(`   ‚úÖ Encontrado: ${displayName}`);
                        return displayName;
                    }
                    
                    if (curso) {
                        console.log(`   ‚úÖ Solo curso encontrado: ${curso.name}`);
                        return curso.name;
                    }
                }
            }
            
            // Buscar curso directamente
            const curso = courses.find(c => c.id === courseId);
            if (curso) {
                console.log(`   ‚úÖ Curso directo encontrado: ${curso.name}`);
                return curso.name;
            }
            
            console.log(`   ‚ùå No se encontr√≥ curso para ID: ${courseId}`);
            return 'Curso no encontrado';
        }

        // 3. Probar la funci√≥n con algunos IDs
        console.log('\nüß™ Probando funci√≥n getCourseNameById:');
        const testCourseId = '9077a79d-c290-45f9-b549-6e57df8828d2-d326c181-fa30-4c50-ab68-efa085a3ffd3';
        console.log(`Resultado para ID problem√°tico: "${getCourseNameById(testCourseId)}"`);

        // 4. Mostrar todos los cursos disponibles
        console.log('\nüìö Cursos disponibles:');
        courses.forEach((curso, index) => {
            console.log(`   ${index + 1}. ${curso.name} (ID: ${curso.id})`);
        });

        console.log('\nüìã Secciones disponibles:');
        sections.forEach((seccion, index) => {
            console.log(`   ${index + 1}. ${seccion.name} (ID: ${seccion.id})`);
        });

        // 5. Verificar notificaciones actuales
        const userNotifications = notifications.filter(notif => 
            (notif.targetUsernames?.includes(currentUser.username) || notif.toUsername === currentUser.username)
        );

        console.log(`\nüìã Notificaciones del usuario (${userNotifications.length}):`);
        userNotifications.forEach((notif, index) => {
            console.log(`   ${index + 1}. "${notif.taskTitle}"`);
            console.log(`      Course ID: ${notif.course}`);
            console.log(`      Deber√≠a mostrar: "${getCourseNameById(notif.course)}"`);
            console.log(`      Subject: ${notif.subject}`);
        });

        // 6. Crear funci√≥n mejorada en window para uso en el componente
        window.getCourseNameByIdFixed = getCourseNameById;
        
        console.log('\n‚úÖ Funci√≥n getCourseNameByIdFixed creada en window');
        console.log('üí° Esta funci√≥n puede ser usada en el componente de notificaciones');

        return true;

    } catch (error) {
        console.error('‚ùå Error al corregir visualizaci√≥n de curso:', error);
        return false;
    }
}

// Funci√≥n para parchar el TaskNotificationManager
function patchTaskNotificationManager() {
    console.log('üîß Aplicando parche al TaskNotificationManager...');
    
    try {
        // Verificar si TaskNotificationManager existe
        if (typeof window.TaskNotificationManager === 'undefined') {
            console.log('üì¶ TaskNotificationManager no encontrado en window, intentando cargar...');
            
            // Crear versi√≥n b√°sica si no existe
            window.TaskNotificationManager = {
                getCourseNameById: window.getCourseNameByIdFixed || function(courseId) {
                    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
                    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
                    
                    if (courseId && courseId.includes('-')) {
                        const parts = courseId.split('-');
                        if (parts.length >= 2) {
                            const cursoId = parts[0];
                            const seccionId = parts[1];
                            
                            const curso = courses.find(c => c.id === cursoId);
                            const seccion = sections.find(s => s.id === seccionId);
                            
                            if (curso && seccion) {
                                return `${curso.name} ${seccion.name}`;
                            }
                            if (curso) {
                                return curso.name;
                            }
                        }
                    }
                    
                    const curso = courses.find(c => c.id === courseId);
                    return curso ? curso.name : 'Curso no encontrado';
                }
            };
            
            console.log('‚úÖ TaskNotificationManager b√°sico creado');
        } else {
            // Parchar el m√©todo existente
            const originalMethod = window.TaskNotificationManager.getCourseNameById;
            
            window.TaskNotificationManager.getCourseNameById = function(courseId) {
                try {
                    return window.getCourseNameByIdFixed(courseId);
                } catch (error) {
                    console.warn('‚ö†Ô∏è Error en m√©todo patcheado, usando original:', error);
                    return originalMethod ? originalMethod(courseId) : 'Error';
                }
            };
            
            console.log('‚úÖ TaskNotificationManager.getCourseNameById patcheado');
        }
        
        // Forzar actualizaci√≥n del panel
        window.dispatchEvent(new CustomEvent('taskNotificationsUpdated'));
        window.dispatchEvent(new Event('storage'));
        
        console.log('üì° Eventos de actualizaci√≥n disparados');
        
    } catch (error) {
        console.error('‚ùå Error al aplicar parche:', error);
    }
}

// Ejecutar correcci√≥n
console.log('üöÄ Iniciando correcci√≥n completa...');
const success = fixCourseDisplayInNotifications();

if (success) {
    console.log('‚úÖ An√°lisis completado');
    patchTaskNotificationManager();
    console.log('üéâ Correcci√≥n aplicada. El panel deber√≠a mostrar ahora el nombre del curso en lugar del ID.');
    console.log('üí° Si el problema persiste, recarga la p√°gina.');
} else {
    console.log('‚ùå No se pudo completar la correcci√≥n');
}

console.log('\nüîß Script completado. Usa window.getCourseNameByIdFixed(courseId) para probar la funci√≥n.');
