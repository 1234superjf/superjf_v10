/**
 * üîß CORRECCI√ìN FORMATO CURSO EN PERFILES PERSONALES üîß
 * 
 * üéØ OBJETIVO: Corregir el formato duplicado en perfiles personales
 * 
 * üö® PROBLEMA DETECTADO: 
 * - gustavo: Perfil muestra "5to B√°sico - Secci√≥n A - Secci√≥n A" (duplicado)
 * - max: Perfil muestra "6to B√°sico - Secci√≥n A - Secci√≥n A" (duplicado)
 * 
 * üí° SOLUCI√ìN: Corregir activeCourses para que use formato est√°ndar "X B√°sico - Secci√≥n Y"
 * 
 * üìã INSTRUCCIONES:
 * 1. Abre la consola del navegador (F12 ‚Üí Console)
 * 2. Copia y pega este c√≥digo completo
 * 3. Presiona Enter para ejecutar
 * 4. Recarga la p√°gina despu√©s de ver "üéâ ¬°Correcci√≥n completada!"
 * 5. Verifica los perfiles personales de gustavo y max
 */

(function() {
    console.log('üîß [PROFILE FIX] Iniciando correcci√≥n de formato en perfiles...');
    
    try {
        const usersText = localStorage.getItem('smart-student-users');
        if (!usersText) {
            console.error('‚ùå [PROFILE FIX] No se encontraron usuarios en localStorage');
            return;
        }
        
        const users = JSON.parse(usersText);
        console.log(`üë• [PROFILE FIX] Encontrados ${users.length} usuarios`);
        
        console.log('üìã [PROFILE FIX] Estado ANTES de la correcci√≥n:');
        users.forEach(user => {
            if (user.role === 'student') {
                console.log(`   ${user.username}:`);
                console.log(`     ‚Ä¢ activeCourses: [${user.activeCourses?.join(', ') || 'vac√≠o'}]`);
                console.log(`     ‚Ä¢ assignedCourse: "${user.assignedCourse || 'undefined'}"`);
                console.log(`     ‚Ä¢ sectionName: "${user.sectionName}"`);
            }
        });
        
        let changesCount = 0;
        
        // Corregir formatos duplicados y inconsistentes
        users.forEach(user => {
            if (user.role === 'student' && user.activeCourses && Array.isArray(user.activeCourses)) {
                let needsUpdate = false;
                const correctedCourses = [];
                
                for (const course of user.activeCourses) {
                    if (typeof course === 'string') {
                        // Detectar y corregir formatos duplicados como "5to B√°sico - Secci√≥n A - Secci√≥n A"
                        if (course.includes('- Secci√≥n') && course.split('- Secci√≥n').length > 2) {
                            console.log(`üîß [PROFILE FIX] Corrigiendo formato duplicado en ${user.username}: "${course}"`);
                            
                            // Extraer el curso base y la primera secci√≥n
                            const parts = course.split(' - Secci√≥n ');
                            const baseCourseName = parts[0]; // Ej: "5to B√°sico"
                            const sectionName = parts[1] ? parts[1].split(' - ')[0] : 'A'; // Primera secci√≥n mencionada
                            
                            const correctedFormat = `${baseCourseName} - Secci√≥n ${sectionName}`;
                            correctedCourses.push(correctedFormat);
                            needsUpdate = true;
                            
                            console.log(`   ‚Ü™Ô∏è Nuevo formato: "${correctedFormat}"`);
                        } 
                        // Detectar formatos que no tienen "Secci√≥n" pero deber√≠an tenerlo
                        else if (course.match(/^\d+to B√°sico - [AB]$/)) {
                            console.log(`üîß [PROFILE FIX] A√±adiendo "Secci√≥n" a ${user.username}: "${course}"`);
                            
                            const correctedFormat = course.replace(/ - ([AB])$/, ' - Secci√≥n $1');
                            correctedCourses.push(correctedFormat);
                            needsUpdate = true;
                            
                            console.log(`   ‚Ü™Ô∏è Nuevo formato: "${correctedFormat}"`);
                        }
                        else {
                            // Mantener el formato si ya est√° correcto
                            correctedCourses.push(course);
                        }
                    } else {
                        // Si no es string, mantener como est√°
                        correctedCourses.push(course);
                    }
                }
                
                if (needsUpdate) {
                    user.activeCourses = correctedCourses;
                    changesCount++;
                    console.log(`‚úÖ [PROFILE FIX] ${user.username} corregido`);
                }
                
                // Tambi√©n corregir assignedCourse si tiene el mismo problema
                if (user.assignedCourse && typeof user.assignedCourse === 'string') {
                    if (user.assignedCourse.includes('- Secci√≥n') && user.assignedCourse.split('- Secci√≥n').length > 2) {
                        console.log(`üîß [PROFILE FIX] Corrigiendo assignedCourse duplicado en ${user.username}: "${user.assignedCourse}"`);
                        
                        const parts = user.assignedCourse.split(' - Secci√≥n ');
                        const baseCourseName = parts[0];
                        const sectionName = parts[1] ? parts[1].split(' - ')[0] : 'A';
                        
                        user.assignedCourse = `${baseCourseName} - Secci√≥n ${sectionName}`;
                        needsUpdate = true;
                        
                        console.log(`   ‚Ü™Ô∏è assignedCourse corregido: "${user.assignedCourse}"`);
                    }
                }
            }
        });
        
        if (changesCount > 0) {
            // Guardar cambios
            localStorage.setItem('smart-student-users', JSON.stringify(users));
            console.log(`üíæ [PROFILE FIX] Guardados ${changesCount} cambios en localStorage`);
            
            console.log('üìã [PROFILE FIX] Estado DESPU√âS de la correcci√≥n:');
            users.forEach(user => {
                if (user.role === 'student') {
                    console.log(`   ${user.username}:`);
                    console.log(`     ‚Ä¢ activeCourses: [${user.activeCourses?.join(', ') || 'vac√≠o'}]`);
                    console.log(`     ‚Ä¢ assignedCourse: "${user.assignedCourse || 'undefined'}"`);
                }
            });
            
            console.log('üéâ [PROFILE FIX] ¬°Correcci√≥n completada! Recarga la p√°gina (F5) para ver los cambios.');
            console.log('üîç [PROFILE FIX] Verifica los perfiles personales de gustavo y max.');
        } else {
            console.log('‚ÑπÔ∏è [PROFILE FIX] No se encontraron formatos duplicados que corregir.');
        }
        
    } catch (error) {
        console.error('‚ùå [PROFILE FIX] Error durante la correcci√≥n:', error);
    }
})();
