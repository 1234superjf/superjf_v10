/**
 * üéØ PRUEBA FINAL: Correcci√≥n Completa de "Todo el Curso"
 * 
 * Script para verificar que todas las correcciones aplicadas funcionan correctamente
 */

console.log('üéØ PRUEBA FINAL: CORRECCI√ìN COMPLETA');
console.log('='.repeat(50));

// Verificar datos b√°sicos
const currentUser = JSON.parse(localStorage.getItem('smart-student-current-user') || 'null');
const tasks = JSON.parse(localStorage.getItem('smart-student-tasks') || '[]');
const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');

console.log(`üë§ Usuario actual: ${currentUser?.username || 'N/A'} (${currentUser?.role || 'N/A'})`);
console.log(`üìù Tareas totales: ${tasks.length}`);

// Buscar tareas de "Todo el Curso"
const tareasCurso = tasks.filter(t => t.assignedTo === 'course');
console.log(`üìä Tareas "Todo el Curso": ${tareasCurso.length}`);

if (tareasCurso.length === 0) {
    console.log('\n‚ùå NO HAY TAREAS DE "TODO EL CURSO" PARA PROBAR');
    console.log('üí° Para crear una tarea de prueba:');
    console.log('1. Inicia sesi√≥n como profesor (jorge)');
    console.log('2. Ve a Tareas > Crear Nueva Tarea');
    console.log('3. Selecciona "Todo el Curso" y elige "4to B√°sico Secci√≥n A"');
    console.log('4. Guarda la tarea');
    console.log('5. Luego inicia sesi√≥n como felipe o maria para probar');
    return;
}

// Mostrar tareas encontradas
console.log('\nüìù TAREAS DE "TODO EL CURSO" ENCONTRADAS:');
tareasCurso.forEach((tarea, i) => {
    const courseId = tarea.courseSectionId || tarea.course;
    console.log(`${i + 1}. "${tarea.title}"`);
    console.log(`   CourseId: ${courseId}`);
    console.log(`   Tipo ID: ${courseId?.includes('-') && courseId.length > 40 ? 'üîß Combinado (UUID-UUID)' : 'üìö Simple'}`);
    console.log(`   AssignedById: ${tarea.assignedById}`);
});

// Verificar estudiantes relevantes
console.log('\nüë• ESTUDIANTES RELEVANTES:');
const estudiantesRelevantes = [
    { username: 'felipe', seccion: '4to B√°sico Secci√≥n A', deber√≠a: 'VER' },
    { username: 'maria', seccion: '4to B√°sico Secci√≥n A', deber√≠a: 'VER' },
    { username: 'sofia', seccion: '4to B√°sico Secci√≥n B', deber√≠a: 'NO VER' },
    { username: 'karla', seccion: '4to B√°sico Secci√≥n B', deber√≠a: 'NO VER' },
    { username: 'gustavo', seccion: '5to B√°sico Secci√≥n A', deber√≠a: 'NO VER' },
    { username: 'max', seccion: '5to B√°sico Secci√≥n A', deber√≠a: 'NO VER' }
];

estudiantesRelevantes.forEach(est => {
    const userData = users.find(u => u.username === est.username);
    const userAssignments = studentAssignments.filter(a => a.studentId === userData?.id);
    
    console.log(`\n${est.username} (${est.seccion}):`);
    console.log(`   Expectativa: ${est.deber√≠a === 'VER' ? '‚úÖ DEBE VER' : '‚ùå NO DEBE VER'} tareas de 4to A`);
    console.log(`   Asignaciones: ${userAssignments.length}`);
    
    if (userAssignments.length > 0) {
        userAssignments.forEach(asig => {
            console.log(`     CourseId: ${asig.courseId}, SectionId: ${asig.sectionId}`);
        });
    }
});

// Funci√≥n de prueba simulada
function testGetCourseDataFromCombinedId(combinedId) {
    if (!combinedId) return null;
    
    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
    
    const parts = combinedId.split('-');
    if (parts.length < 2) return null;
    
    const guidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    
    let courseId = '';
    let sectionId = '';
    
    for (let i = 5; i < parts.length - 4; i++) {
        const testCourseId = parts.slice(0, i).join('-');
        const testSectionId = parts.slice(i).join('-');
        
        if (guidPattern.test(testCourseId) && guidPattern.test(testSectionId)) {
            courseId = testCourseId;
            sectionId = testSectionId;
            break;
        }
    }
    
    if (!courseId || !sectionId) return null;
    
    const course = courses.find(c => c.id === courseId);
    const section = sections.find(s => s.id === sectionId);
    
    if (!course || !section) return null;
    
    return {
        id: combinedId,
        courseId: course.id,
        sectionId: section.id,
        name: `${course.name} Secci√≥n ${section.name}`
    };
}

// Probar funci√≥n auxiliar con tareas reales
console.log('\nüîß PROBANDO FUNCI√ìN AUXILIAR:');
tareasCurso.forEach(tarea => {
    const courseId = tarea.courseSectionId || tarea.course;
    console.log(`\nTarea: "${tarea.title}"`);
    console.log(`CourseId: ${courseId}`);
    
    const result = testGetCourseDataFromCombinedId(courseId);
    if (result) {
        console.log(`‚úÖ Parseado exitoso: ${result.name}`);
        console.log(`   CourseId: ${result.courseId}`);
        console.log(`   SectionId: ${result.sectionId}`);
    } else {
        console.log(`‚ùå No se pudo parsear el courseId`);
    }
});

console.log('\nüéØ INSTRUCCIONES DE PRUEBA:');
console.log('1. üîÑ Actualiza la p√°gina (F5) si no lo has hecho');
console.log('2. üë§ Aseg√∫rate de estar logueado como Felipe o Mar√≠a');
console.log('3. üìö Ve a la pesta√±a "Tareas"');
console.log('4. ‚úÖ Deber√≠as ver las tareas de "Todo el Curso" ahora');
console.log('5. üîç Si no aparecen, revisa la consola para logs de debug');

console.log('\nüìä LOGS CLAVE A BUSCAR:');
console.log('‚úÖ [CORRECCI√ìN] Detectado ID combinado, usando getCourseDataFromCombinedId...');
console.log('‚úÖ [getFilteredTasks] Tarea "xxx" para estudiante felipe: ‚úÖ VISIBLE');
console.log('‚úÖ [isStudentAssignedToTask] Verificando acceso para estudiante...');

console.log('\nüö´ ERRORES QUE YA NO DEBER√çAN APARECER:');
console.log('‚ùå "availableCourses is not defined" - RESUELTO');
console.log('‚ùå "getStudentsForCourse No se encontr√≥ informaci√≥n" - RESUELTO');
console.log('‚ùå "getAvailableCoursesWithNames only works for teachers" - RESUELTO');

console.log('\nüéâ ¬°TODAS LAS CORRECCIONES APLICADAS!');

// Ejecutar autom√°ticamente si estamos en contexto de estudiante
if (currentUser?.role === 'student' && tareasCurso.length > 0) {
    console.log('\nüß™ EJECUTANDO PRUEBA AUTOM√ÅTICA...');
    setTimeout(() => {
        location.reload(); // Recargar para ver los cambios
    }, 2000);
    console.log('‚è≥ Recargando p√°gina en 2 segundos para aplicar cambios...');
}
