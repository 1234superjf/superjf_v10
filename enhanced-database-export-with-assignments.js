/**
 * EXPORTACI√ìN ENRIQUECIDA: Incluir asignaciones din√°micas en la exportaci√≥n de la BBDD
 */

console.log('üíæ EXPORTACI√ìN ENRIQUECIDA CON ASIGNACIONES DIN√ÅMICAS');
console.log('====================================================');

// Funci√≥n para crear exportaci√≥n completa con asignaciones correctas
function crearExportacionCompleta() {
    console.log('\nüîÑ CREANDO EXPORTACI√ìN COMPLETA...');
    
    // Cargar datos actuales
    const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
    const communications = JSON.parse(localStorage.getItem('smart-student-communications') || '[]');
    const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
    const teacherAssignments = JSON.parse(localStorage.getItem('smart-student-teacher-assignments') || '[]');
    const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
    const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
    
    // Definir asignaciones correctas como configuraci√≥n de referencia
    const configuracionAsignaciones = {
        version: '1.0',
        lastUpdate: new Date().toISOString(),
        source: 'gestion-usuarios-dinamico',
        estudiantes: [
            // 4to B√°sico Secci√≥n A
            { username: 'felipe', courseName: '4to B√°sico', sectionName: 'A' },
            { username: 'maria', courseName: '4to B√°sico', sectionName: 'A' },
            
            // 4to B√°sico Secci√≥n B
            { username: 'sofia', courseName: '4to B√°sico', sectionName: 'B' },
            { username: 'karla', courseName: '4to B√°sico', sectionName: 'B' },
            
            // 5to B√°sico Secci√≥n A
            { username: 'gustavo', courseName: '5to B√°sico', sectionName: 'A' },
            { username: 'max', courseName: '5to B√°sico', sectionName: 'A' }
        ],
        profesores: [
            // Profesor pedro - 5to B√°sico Secci√≥n A
            { username: 'pedro', courseName: '5to B√°sico', sectionName: 'A', materias: ['Matem√°ticas', 'Ciencias Naturales', 'Historia, Geograf√≠a y Ciencias Sociales', 'Lenguaje y Comunicaci√≥n'] }
            // Agregar m√°s profesores seg√∫n sea necesario
        ]
    };
    
    console.log('\nüìã CONFIGURACI√ìN DE ASIGNACIONES:');
    console.log('   Estudiantes configurados:', configuracionAsignaciones.estudiantes.length);
    console.log('   Profesores configurados:', configuracionAsignaciones.profesores.length);
    
    // Crear exportaci√≥n enriquecida
    const exportacionCompleta = {
        // Datos existentes
        users: users,
    communications: communications,
        courses: courses,
        sections: sections,
        studentAssignments: studentAssignments,
        teacherAssignments: teacherAssignments,
        
        // NUEVA SECCI√ìN: Configuraci√≥n de asignaciones din√°micas
        assignmentConfiguration: configuracionAsignaciones,
        
        // Metadatos de la exportaci√≥n
        exportMetadata: {
            version: '2.0',
            exportDate: new Date().toISOString(),
            description: 'Exportaci√≥n completa con configuraci√≥n de asignaciones din√°micas',
            features: [
                'Asignaciones estudiante-secci√≥n autom√°ticas',
                'Configuraci√≥n de profesores por secci√≥n',
                'Validaci√≥n autom√°tica de consistencia'
            ]
        }
    };
    
    console.log('\n‚úÖ EXPORTACI√ìN COMPLETA CREADA');
    console.log('   ‚Ä¢ Incluye configuraci√≥n de asignaciones din√°micas');
    console.log('   ‚Ä¢ Compatible con importaci√≥n autom√°tica');
    console.log('   ‚Ä¢ Previene inconsistencias futuras');
    
    return exportacionCompleta;
}

// Funci√≥n para aplicar configuraci√≥n desde exportaci√≥n importada
function aplicarConfiguracionDesdeBBDD(datosImportados) {
    console.log('\nüîÑ APLICANDO CONFIGURACI√ìN DESDE BBDD IMPORTADA...');
    
    // Verificar si los datos importados tienen la configuraci√≥n de asignaciones
    if (datosImportados.assignmentConfiguration) {
        console.log('‚úÖ Configuraci√≥n de asignaciones encontrada en la importaci√≥n');
        
        const config = datosImportados.assignmentConfiguration;
        console.log(`   Versi√≥n: ${config.version}`);
        console.log(`   √öltima actualizaci√≥n: ${config.lastUpdate}`);
        console.log(`   Estudiantes: ${config.estudiantes.length}`);
        console.log(`   Profesores: ${config.profesores.length}`);
        
        // Aplicar asignaciones autom√°ticamente
        aplicarAsignacionesDinamicas(config, datosImportados);
        
    } else {
        console.log('‚ö†Ô∏è Los datos importados NO incluyen configuraci√≥n de asignaciones');
        console.log('   Aplicando configuraci√≥n por defecto...');
        
        // Crear configuraci√≥n por defecto y aplicar
        const configDefault = crearExportacionCompleta().assignmentConfiguration;
        aplicarAsignacionesDinamicas(configDefault, datosImportados);
    }
    
    // Aplicar comunicaciones si vienen en el export
    if (Array.isArray(datosImportados.communications)) {
        localStorage.setItem('smart-student-communications', JSON.stringify(datosImportados.communications));
        console.log(`‚úÖ Comunicaciones importadas: ${datosImportados.communications.length}`);
    }
}

// Funci√≥n para aplicar asignaciones din√°micas basadas en configuraci√≥n
function aplicarAsignacionesDinamicas(configuracion, datosImportados) {
    console.log('\nüéØ APLICANDO ASIGNACIONES DIN√ÅMICAS...');
    
    const users = datosImportados.users || [];
    const courses = datosImportados.courses || [];
    const sections = datosImportados.sections || [];
    
    // Crear asignaciones de estudiantes basadas en configuraci√≥n
    const nuevasAsignacionesEstudiantes = [];
    
    configuracion.estudiantes.forEach(asignacion => {
        const estudiante = users.find(u => u.username === asignacion.username && (u.role === 'student' || u.role === 'estudiante'));
        const curso = courses.find(c => c.name === asignacion.courseName);
        const seccion = sections.find(s => s.courseId === curso?.id && s.name === asignacion.sectionName);
        
        if (estudiante && curso && seccion) {
            const nuevaAsignacion = {
                id: `sa-auto-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                studentId: estudiante.id,
                courseId: curso.id,
                sectionId: seccion.id,
                createdAt: new Date().toISOString(),
                assignedAt: new Date().toISOString(),
                source: 'configuracion-automatica'
            };
            
            nuevasAsignacionesEstudiantes.push(nuevaAsignacion);
            
            // Actualizar perfil del estudiante
            estudiante.activeCourses = [`${curso.name} - Secci√≥n ${seccion.name}`];
            estudiante.courseId = curso.id;
            estudiante.sectionId = seccion.id;
            
            console.log(`   ‚úÖ ${estudiante.username} ‚Üí ${curso.name} Secci√≥n ${seccion.name}`);
        }
    });
    
    // Guardar datos actualizados
    localStorage.setItem('smart-student-users', JSON.stringify(users));
    localStorage.setItem('smart-student-student-assignments', JSON.stringify(nuevasAsignacionesEstudiantes));
    
    console.log(`‚úÖ Asignaciones aplicadas: ${nuevasAsignacionesEstudiantes.length}`);
}

// Funci√≥n de validaci√≥n autom√°tica (ejecutar despu√©s de importar)
function validarYCorregirAsignaciones() {
    console.log('\nüîç VALIDACI√ìN AUTOM√ÅTICA DE ASIGNACIONES...');
    
    const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
    const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
    
    const estudiantes = users.filter(u => u.role === 'student' || u.role === 'estudiante');
    let problemasEncontrados = 0;
    
    estudiantes.forEach(estudiante => {
        const asignaciones = studentAssignments.filter(sa => sa.studentId === estudiante.id);
        
        if (asignaciones.length === 0) {
            console.log(`   ‚ùå ${estudiante.username}: Sin asignaciones`);
            problemasEncontrados++;
        } else if (asignaciones.length > 1) {
            console.log(`   ‚ö†Ô∏è ${estudiante.username}: M√∫ltiples asignaciones (${asignaciones.length})`);
            problemasEncontrados++;
        }
    });
    
    if (problemasEncontrados > 0) {
        console.log(`üîß Se encontraron ${problemasEncontrados} problemas. Aplicando correcci√≥n autom√°tica...`);
        
        // Aplicar configuraci√≥n por defecto
        const configDefault = crearExportacionCompleta().assignmentConfiguration;
        aplicarAsignacionesDinamicas(configDefault, {
            users: users,
            courses: JSON.parse(localStorage.getItem('smart-student-courses') || '[]'),
            sections: JSON.parse(localStorage.getItem('smart-student-sections') || '[]')
        });
        
        console.log('‚úÖ Correcci√≥n autom√°tica aplicada');
    } else {
        console.log('‚úÖ No se encontraron problemas en las asignaciones');
    }
    
    return problemasEncontrados === 0;
}

// EXPORTAR FUNCIONES PARA USO EXTERNO
window.smartStudentAssignments = {
    crearExportacionCompleta,
    aplicarConfiguracionDesdeBBDD,
    validarYCorregirAsignaciones,
    aplicarAsignacionesDinamicas
};

console.log('\nüéâ SISTEMA DE ASIGNACIONES DIN√ÅMICAS ACTIVADO');
console.log('=============================================');
console.log('‚úÖ Funciones disponibles globalmente:');
console.log('   ‚Ä¢ smartStudentAssignments.crearExportacionCompleta()');
console.log('   ‚Ä¢ smartStudentAssignments.aplicarConfiguracionDesdeBBDD(datos)');
console.log('   ‚Ä¢ smartStudentAssignments.validarYCorregirAsignaciones()');
console.log('');
console.log('üìã PASOS RECOMENDADOS:');
console.log('1. üíæ Ejecutar: smartStudentAssignments.crearExportacionCompleta()');
console.log('2. üì§ Guardar la exportaci√≥n generada como archivo JSON');
console.log('3. üì• Al importar, la configuraci√≥n se aplicar√° autom√°ticamente');
console.log('4. üîç Ejecutar validaci√≥n autom√°tica despu√©s de cada importaci√≥n');
console.log('');
console.log('üéØ BENEFICIOS:');
console.log('‚úÖ Sin m√°s problemas de asignaciones despu√©s de importar');
console.log('‚úÖ Configuraci√≥n persistente en la exportaci√≥n');
console.log('‚úÖ Validaci√≥n autom√°tica de consistencia');
console.log('‚úÖ Sistema completamente din√°mico');

// Ejecutar validaci√≥n inicial
console.log('\nüîÑ EJECUTANDO VALIDACI√ìN INICIAL...');
const estadoValido = validarYCorregirAsignaciones();

if (estadoValido) {
    console.log('\nüéâ SISTEMA LISTO Y VALIDADO');
} else {
    console.log('\n‚úÖ SISTEMA CORREGIDO Y LISTO');
}
