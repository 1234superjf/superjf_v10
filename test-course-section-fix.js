/**
 * üîß VERIFICACI√ìN DE CORRECCI√ìN: Guardado de Curso y Secci√≥n
 * Ejecutar en la consola del navegador para verificar las correcciones
 */

console.log('üîß VERIFICACI√ìN DE CORRECCI√ìN: Guardado de Curso y Secci√≥n');
console.log('=======================================================');

// 1. Verificar estructura de datos en localStorage
console.log('\nüìä VERIFICANDO DATOS EN LOCALSTORAGE:');

const tasks = JSON.parse(localStorage.getItem('smart-student-tasks') || '[]');
const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');

console.log(`   ‚Ä¢ Tareas: ${tasks.length}`);
console.log(`   ‚Ä¢ Cursos: ${courses.length}`);
console.log(`   ‚Ä¢ Secciones: ${sections.length}`);

// 2. Verificar cursos con secciones disponibles
console.log('\nüè´ CURSOS Y SECCIONES DISPONIBLES:');
courses.forEach(course => {
    const courseSections = sections.filter(s => s.courseId === course.id);
    console.log(`   üìö ${course.name}:`);
    courseSections.forEach(section => {
        const combinedId = `${course.id}-${section.id}`;
        console.log(`      üìù Secci√≥n ${section.name} - ID combinado: ${combinedId}`);
    });
});

// 3. Verificar tareas existentes y su estructura
console.log('\nüìã AN√ÅLISIS DE TAREAS EXISTENTES:');
if (tasks.length > 0) {
    tasks.forEach((task, index) => {
        console.log(`   üéØ Tarea ${index + 1}: "${task.title}"`);
        console.log(`      ‚Ä¢ course: ${task.course}`);
        console.log(`      ‚Ä¢ courseSectionId: ${task.courseSectionId || 'NO DEFINIDO'}`);
        
        // Verificar si el course corresponde a un courseId o a un ID combinado
        const isComposed = task.course && task.course.includes('-') && task.course.length > 40;
        console.log(`      ‚Ä¢ Tipo de ID: ${isComposed ? 'COMBINADO (course+section)' : 'SIMPLE (solo course)'}`);
        
        if (task.courseSectionId) {
            console.log(`      ‚Ä¢ ‚úÖ NUEVA ESTRUCTURA: Tiene courseSectionId`);
        } else {
            console.log(`      ‚Ä¢ ‚ö†Ô∏è ESTRUCTURA ANTIGUA: Sin courseSectionId`);
        }
    });
} else {
    console.log('   ‚ö†Ô∏è No hay tareas en el sistema');
}

// 4. Funci√≥n de prueba para crear tarea
window.testTaskCreation = function() {
    console.log('\nüß™ FUNCI√ìN DE PRUEBA: Simulaci√≥n de creaci√≥n de tarea');
    
    // Simular datos que enviar√≠a el formulario
    const testFormData = {
        course: '9077a79d-c290-45f9-b549-6e57df8828d2-d326c181-fa30-4c50-ab68-efa085a3ffd3', // 4to B√°sico B
        title: 'Tarea de Prueba',
        subject: 'Matem√°ticas'
    };
    
    console.log('   üìù Datos del formulario simulados:');
    console.log('      course (ID combinado):', testFormData.course);
    
    // Simular extracci√≥n como en el c√≥digo real
    const parts = testFormData.course.split('-');
    if (parts.length >= 10) {
        const courseId = parts.slice(0, 5).join('-');
        const sectionId = parts.slice(5).join('-');
        
        console.log('   üîß Extracci√≥n de IDs:');
        console.log('      courseId extra√≠do:', courseId);
        console.log('      sectionId extra√≠do:', sectionId);
        console.log('      courseSectionId completo:', testFormData.course);
        
        // Buscar nombres
        const course = courses.find(c => c.id === courseId);
        const section = sections.find(s => s.id === sectionId);
        
        if (course && section) {
            console.log('   üìö Informaci√≥n encontrada:');
            console.log('      Curso:', course.name);
            console.log('      Secci√≥n:', section.name);
            console.log('      Nombre completo:', `${course.name} Secci√≥n ${section.name}`);
        }
        
        // Simular estructura de tarea que se guardar√≠a
        const simulatedTask = {
            id: `task_test_${Date.now()}`,
            title: testFormData.title,
            subject: testFormData.subject,
            course: courseId, // Para compatibilidad
            courseSectionId: testFormData.course, // Para preservar secci√≥n
        };
        
        console.log('   üíæ Estructura de tarea que se guardar√≠a:');
        console.log('      course (courseId):', simulatedTask.course);
        console.log('      courseSectionId (completo):', simulatedTask.courseSectionId);
        console.log('   ‚úÖ Esta estructura preserva tanto courseId como la informaci√≥n de secci√≥n');
    }
};

// 5. Instrucciones de prueba
console.log('\nüéØ INSTRUCCIONES PARA PROBAR:');
console.log('1. Ejecuta: testTaskCreation()');
console.log('2. Ve a la pesta√±a de Tareas en la app');
console.log('3. Crea una nueva tarea seleccionando "4to B√°sico Secci√≥n B"');
console.log('4. Guarda la tarea');
console.log('5. Verifica que aparezca como "4to B√°sico Secci√≥n B"');
console.log('6. Edita la tarea y verifica que mantiene "4to B√°sico Secci√≥n B"');
console.log('7. Crea otra tarea con "5to B√°sico Secci√≥n A" para verificar que no se confunda');

console.log('\nüí° NOTAS:');
console.log('‚Ä¢ Las tareas nuevas tendr√°n campo "courseSectionId"');
console.log('‚Ä¢ Las tareas antiguas seguir√°n funcionando con "course"');
console.log('‚Ä¢ El sistema usa "courseSectionId" si existe, sino usa "course"');
console.log('‚Ä¢ Esto garantiza compatibilidad hacia atr√°s');

// Ejecutar funci√≥n de prueba autom√°ticamente
testTaskCreation();
