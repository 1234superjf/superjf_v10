// Script para depurar el problema de comentarios no le√≠dos que aparecen vac√≠os
console.log('üîç [DEBUG] Analizando problema de comentarios no le√≠dos...');

// Simular datos que podr√≠an estar causando el problema
const simulateLocalStorage = () => {
  console.log('\nüì¶ [SIMULATE] Simulando datos de localStorage...');
  
  // Caso 1: Sin comentarios en localStorage
  console.log('\n‚úÖ [CASO 1] Sin comentarios en localStorage:');
  const emptyComments = [];
  console.log(`- Comentarios: ${emptyComments.length}`);
  console.log(`- ¬øDeber√≠a mostrar secci√≥n?: ${emptyComments.length > 0}`);
  
  // Caso 2: Comentarios que NO son del estudiante (le√≠dos o del profesor)
  console.log('\n‚úÖ [CASO 2] Comentarios le√≠dos o del profesor:');
  const readComments = [
    {
      id: 'comment-1',
      studentUsername: 'felipin', // Mismo usuario que el profesor
      comment: 'Comentario del profesor',
      isSubmission: false,
      readBy: ['felipin'], // Ya le√≠do por el profesor
      taskId: 'task-1'
    },
    {
      id: 'comment-2', 
      studentUsername: 'student-1',
      comment: 'Comentario de estudiante',
      isSubmission: false,
      readBy: ['felipin'], // Ya le√≠do por el profesor
      taskId: 'task-1'
    }
  ];
  
  // Filtrar como lo hace la funci√≥n real
  const currentUser = 'felipin';
  const teacherTaskIds = ['task-1', 'task-2'];
  
  const filteredComments = readComments.filter(comment => 
    !comment.isSubmission && // Solo comentarios, no entregas
    teacherTaskIds.includes(comment.taskId) &&
    comment.studentUsername !== currentUser && // Excluir comentarios propios del profesor
    (!comment.readBy?.includes(currentUser)) // No le√≠dos por el profesor
  );
  
  console.log(`- Comentarios despu√©s de filtrar: ${filteredComments.length}`);
  console.log(`- ¬øDeber√≠a mostrar secci√≥n?: ${filteredComments.length > 0}`);
  
  // Caso 3: Comentarios no le√≠dos reales
  console.log('\n‚úÖ [CASO 3] Comentarios no le√≠dos reales:');
  const unreadComments = [
    {
      id: 'comment-3',
      studentUsername: 'student-2',
      comment: 'Tengo una duda sobre la tarea',
      isSubmission: false,
      readBy: [], // No le√≠do por nadie
      taskId: 'task-1'
    }
  ];
  
  const filteredUnread = unreadComments.filter(comment => 
    !comment.isSubmission && 
    teacherTaskIds.includes(comment.taskId) &&
    comment.studentUsername !== currentUser && 
    (!comment.readBy?.includes(currentUser))
  );
  
  console.log(`- Comentarios no le√≠dos: ${filteredUnread.length}`);
  console.log(`- ¬øDeber√≠a mostrar secci√≥n?: ${filteredUnread.length > 0}`);
};

// Funci√≥n para identificar posibles causas
const identifyPossibleIssues = () => {
  console.log('\nüîç [ANALYSIS] Posibles causas del problema:');
  
  console.log('\n1. üö´ Estado inicial no limpiado:');
  console.log('   - El array unreadStudentComments podr√≠a tener datos residuales');
  console.log('   - Verificar si clearStates() limpia correctamente');
  
  console.log('\n2. üö´ Condici√≥n de renderizado incorrecta:');
  console.log('   - La condici√≥n {unreadStudentComments.length > 0 && (...)} podr√≠a tener problemas');
  console.log('   - Verificar si el estado se actualiza correctamente');
  
  console.log('\n3. üö´ Funci√≥n loadStudentSubmissions no ejecut√°ndose:');
  console.log('   - La funci√≥n podr√≠a no estar siendo llamada cuando cambia el usuario');
  console.log('   - Verificar useEffect dependencies');
  
  console.log('\n4. üö´ Datos en localStorage corruptos:');
  console.log('   - Comentarios con formato incorrecto');
  console.log('   - Tareas sin asignar correctamente');
};

// Funci√≥n para proponer soluciones
const proposeSolutions = () => {
  console.log('\nüí° [SOLUTIONS] Soluciones propuestas:');
  
  console.log('\n1. ‚úÖ Limpieza forzada del estado:');
  console.log('   - Asegurar que setUnreadStudentComments([]) se ejecute al cambiar usuario');
  
  console.log('\n2. ‚úÖ Validaci√≥n de datos:');
  console.log('   - Verificar que todos los comentarios tengan la estructura correcta');
  
  console.log('\n3. ‚úÖ Logging adicional:');
  console.log('   - Agregar logs en loadStudentSubmissions para depurar');
  
  console.log('\n4. ‚úÖ Simplificar condici√≥n:');
  console.log('   - Asegurar que la condici√≥n de renderizado sea clara y simple');
};

// Ejecutar an√°lisis
simulateLocalStorage();
identifyPossibleIssues();
proposeSolutions();

console.log('\nüéØ [SUMMARY] El problema m√°s probable:');
console.log('- El estado unreadStudentComments no se est√° limpiando correctamente');
console.log('- O la funci√≥n loadStudentSubmissions no se est√° ejecutando');
console.log('- Necesitamos logs para confirmar qu√© est√° pasando');
