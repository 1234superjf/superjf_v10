/**
 * üîß VERIFICACI√ìN: Correcci√≥n de Estudiantes Inventados vs Reales
 * Ejecutar en la consola del navegador para verificar la correcci√≥n
 */

console.log('üîß VERIFICACI√ìN: Estudiantes Reales vs Inventados');
console.log('===============================================');

// 1. Verificar estudiantes reales en Gesti√≥n de Usuarios
console.log('\nüë• ESTUDIANTES REALES EN GESTI√ìN DE USUARIOS:');

const allUsers = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
const realStudents = allUsers.filter(u => u.role === 'student' || u.role === 'estudiante');

console.log(`   Total estudiantes reales: ${realStudents.length}`);
realStudents.forEach((student, index) => {
    console.log(`   ${index + 1}. ${student.displayName || student.username} (ID: ${student.id})`);
});

// 2. Verificar asignaciones de estudiantes por secci√≥n
console.log('\nüìã ASIGNACIONES DE ESTUDIANTES POR SECCI√ìN:');

const studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');
console.log(`   Total asignaciones: ${studentAssignments.length}`);

// Agrupar por secci√≥n
const assignmentsBySectionId = studentAssignments.reduce((acc, assignment) => {
    const sectionId = assignment.sectionId;
    if (!acc[sectionId]) {
        acc[sectionId] = [];
    }
    acc[sectionId].push(assignment);
    return acc;
}, {});

const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');

Object.keys(assignmentsBySectionId).forEach(sectionId => {
    const section = sections.find(s => s.id === sectionId);
    const assignments = assignmentsBySectionId[sectionId];
    
    if (section) {
        const course = courses.find(c => c.id === section.courseId);
        const courseName = course ? course.name : section.courseId;
        
        console.log(`   üìö ${courseName} Secci√≥n ${section.name}:`);
        assignments.forEach(assignment => {
            const student = realStudents.find(s => s.id === assignment.studentId);
            const studentName = student ? student.displayName || student.username : `ID: ${assignment.studentId}`;
            console.log(`      ‚Ä¢ ${studentName}`);
        });
    }
});

// 3. Funci√≥n para probar obtenci√≥n de estudiantes
window.testStudentRetrieval = function(courseSectionId) {
    console.log(`\nüß™ PROBANDO OBTENCI√ìN DE ESTUDIANTES PARA: ${courseSectionId}`);
    
    // Simular extracci√≥n de courseId y sectionId
    const parts = courseSectionId.split('-');
    if (parts.length >= 10) {
        const courseId = parts.slice(0, 5).join('-');
        const sectionId = parts.slice(5).join('-');
        
        console.log(`   CourseId: ${courseId}`);
        console.log(`   SectionId: ${sectionId}`);
        
        // Buscar asignaciones para esta secci√≥n espec√≠fica
        const relevantAssignments = studentAssignments.filter(assignment => 
            assignment.courseId === courseId && assignment.sectionId === sectionId
        );
        
        console.log(`   Asignaciones encontradas: ${relevantAssignments.length}`);
        
        if (relevantAssignments.length > 0) {
            console.log('   ‚úÖ ESTUDIANTES REALES QUE SE ASIGNAR√çAN:');
            relevantAssignments.forEach(assignment => {
                const student = realStudents.find(s => s.id === assignment.studentId);
                if (student) {
                    console.log(`      ‚Ä¢ ${student.displayName || student.username} (ID: ${student.id})`);
                } else {
                    console.log(`      ‚ö†Ô∏è Estudiante no encontrado: ${assignment.studentId}`);
                }
            });
        } else {
            console.log('   ‚ùå NO HAY ASIGNACIONES - Se mostrar√≠a error de configuraci√≥n');
            console.log('   üí° Soluci√≥n: Configurar asignaciones en Admin ‚Üí Gesti√≥n de Usuarios');
        }
    }
};

// 4. Funci√≥n para verificar estudiantes inventados
window.checkForFakeStudents = function() {
    console.log('\nüïµÔ∏è BUSCANDO ESTUDIANTES INVENTADOS:');
    
    const fakePatterns = ['ana_martinez', 'carlos_rodriguez', 'student_4to_b_'];
    const fakeStudents = allUsers.filter(user => 
        fakePatterns.some(pattern => 
            user.username.includes(pattern) || 
            (user.displayName && user.displayName.includes('Ana Mart√≠nez')) ||
            (user.displayName && user.displayName.includes('Carlos Rodr√≠guez'))
        )
    );
    
    if (fakeStudents.length > 0) {
        console.log(`   ‚ùå ENCONTRADOS ${fakeStudents.length} ESTUDIANTES INVENTADOS:`);
        fakeStudents.forEach(fake => {
            console.log(`      ‚Ä¢ ${fake.displayName || fake.username} (ID: ${fake.id})`);
        });
        console.log('   üí° Estos estudiantes deber√≠an eliminarse y usar solo los reales');
    } else {
        console.log('   ‚úÖ NO hay estudiantes inventados - sistema limpio');
    }
    
    return fakeStudents;
};

// 5. Instrucciones de prueba
console.log('\nüéØ INSTRUCCIONES PARA VERIFICAR:');
console.log('1. Ejecuta: checkForFakeStudents()');
console.log('2. Ve a Admin ‚Üí Gesti√≥n de Usuarios ‚Üí Asignaciones');
console.log('3. Verifica que hay estudiantes asignados a las secciones');
console.log('4. Ve a Profesor ‚Üí Tareas');
console.log('5. Crea una tarea para "todo el curso"');
console.log('6. Verifica que aparezcan SOLO los estudiantes reales configurados');
console.log('7. NO deben aparecer "Ana Mart√≠nez" ni "Carlos Rodr√≠guez"');

console.log('\nüí° PARA PROBAR SECCIONES ESPEC√çFICAS:');
console.log('‚Ä¢ testStudentRetrieval("courseId-sectionId")');
console.log('‚Ä¢ Usa el ID combinado que aparece en los dropdowns');

// Ejecutar verificaciones autom√°ticamente
checkForFakeStudents();

console.log('\n‚úÖ RESULTADO ESPERADO DESPU√âS DE LA CORRECCI√ìN:');
console.log('‚Ä¢ Las tareas para "todo el curso" solo muestran estudiantes reales');
console.log('‚Ä¢ Si no hay asignaciones, se muestra error (no estudiantes inventados)');
console.log('‚Ä¢ Los estudiantes aparecen seg√∫n la configuraci√≥n del admin');
