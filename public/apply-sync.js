// Script para aplicar sincronizaci√≥n inmediata de datos acad√©micos de estudiantes
console.log("üîß Aplicando sincronizaci√≥n de datos acad√©micos...");

// Funci√≥n para actualizar perfil de estudiante espec√≠fico
function syncStudentProfile(username) {
  console.log(`üîÑ Sincronizando perfil del estudiante: ${username}`);
  
  // 1. Obtener datos actuales del usuario
  const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
  const student = users.find(u => u.username === username && u.role === 'student');
  
  if (!student) {
    console.log(`‚ùå Estudiante ${username} no encontrado`);
    return false;
  }
  
  console.log("üë§ Datos del estudiante:", student);
  
  // 2. Obtener cursos y secciones
  const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
  const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
  
  // 3. Encontrar curso y secci√≥n
  const course = courses.find(c => c.id === student.courseId);
  const section = sections.find(s => s.id === student.sectionId);
  
  console.log("üìö Curso:", course);
  console.log("üè´ Secci√≥n:", section);
  
  if (course && section) {
    console.log(`‚úÖ Datos acad√©micos correctos: ${course.name} - ${section.name}`);
    
    // 4. Disparar eventos de sincronizaci√≥n
    console.log("üöÄ Disparando eventos de sincronizaci√≥n...");
    window.dispatchEvent(new CustomEvent('studentAssignmentsChanged'));
    window.dispatchEvent(new CustomEvent('userDataUpdated'));
    window.dispatchEvent(new CustomEvent('localStorageUpdate'));
    
    return true;
  } else {
    console.log("‚ùå No se pudieron encontrar datos acad√©micos v√°lidos");
    return false;
  }
}

// Funci√≥n para sincronizar todos los estudiantes
function syncAllStudents() {
  console.log("üîÑ Sincronizando todos los estudiantes...");
  
  const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
  const students = users.filter(u => u.role === 'student');
  
  console.log(`üë• Encontrados ${students.length} estudiantes`);
  
  let successCount = 0;
  students.forEach(student => {
    if (syncStudentProfile(student.username)) {
      successCount++;
    }
  });
  
  console.log(`‚úÖ Sincronizados ${successCount}/${students.length} estudiantes`);
  
  // Disparar evento global de sincronizaci√≥n
  setTimeout(() => {
    console.log("üåç Disparando evento global de sincronizaci√≥n...");
    window.dispatchEvent(new CustomEvent('studentAssignmentsChanged'));
  }, 500);
}

// Ejecutar sincronizaci√≥n
if (typeof window !== 'undefined') {
  // Sincronizar espec√≠ficamente a gustavo
  syncStudentProfile('gustavo');
  
  // Sincronizar todos despu√©s de un momento
  setTimeout(() => {
    syncAllStudents();
  }, 1000);
  
  console.log("‚ú® Sincronizaci√≥n aplicada. Revisa el perfil del estudiante.");
} else {
  console.log("‚ùå No se puede ejecutar en este contexto");
}