/**
 * üéØ ASIGNACIONES CORRECTAS BASADAS EN GESTI√ìN DE USUARIOS
 * 
 * Script directo con las asignaciones correctas de la imagen que mostraste.
 */

console.log('üéØ APLICANDO ASIGNACIONES CORRECTAS...');
console.log('====================================');

function aplicarAsignacionesCorrectas() {
    try {
        // Asignaciones correctas basadas en tu imagen de gesti√≥n de usuarios
        const asignacionesCorrectas = [
            { username: 'felipe', curso: '4to B√°sico', seccion: 'A' },
            { username: 'maria', curso: '4to B√°sico', seccion: 'A' },
            { username: 'sofia', curso: '4to B√°sico', seccion: 'B' },
            { username: 'karla', curso: '4to B√°sico', seccion: 'B' },
            { username: 'gustavo', curso: '5to B√°sico', seccion: 'B' },
            { username: 'max', curso: '5to B√°sico', seccion: 'B' }
        ];

        console.log('üìã ASIGNACIONES A APLICAR:');
        console.log('==========================');
        asignacionesCorrectas.forEach((asig, index) => {
            console.log(`${index + 1}. ${asig.username}: ${asig.curso} - Secci√≥n ${asig.seccion}`);
        });

        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        const courses = JSON.parse(localStorage.getItem('smart-student-courses') || '[]');
        const sections = JSON.parse(localStorage.getItem('smart-student-sections') || '[]');
        let studentAssignments = JSON.parse(localStorage.getItem('smart-student-student-assignments') || '[]');

        console.log('\nüîß APLICANDO CAMBIOS...');
        console.log('=======================');

        let aplicadas = 0;

        asignacionesCorrectas.forEach(asignacionReal => {
            const usuario = users.find(u => u.username === asignacionReal.username);
            if (!usuario) {
                console.log(`‚ùå Usuario ${asignacionReal.username} no encontrado`);
                return;
            }

            // Buscar o crear curso
            let curso = courses.find(c => c.name === asignacionReal.curso);
            if (!curso) {
                curso = {
                    id: `curso-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    name: asignacionReal.curso,
                    description: `Curso ${asignacionReal.curso}`,
                    createdAt: new Date().toISOString(),
                    autoCreated: true
                };
                courses.push(curso);
                console.log(`‚ûï Curso creado: ${curso.name}`);
            }

            // Buscar o crear secci√≥n
            let seccion = sections.find(s => s.name === asignacionReal.seccion && s.courseId === curso.id);
            if (!seccion) {
                seccion = {
                    id: `seccion-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    name: asignacionReal.seccion,
                    courseId: curso.id,
                    description: `Secci√≥n ${asignacionReal.seccion} de ${curso.name}`,
                    createdAt: new Date().toISOString(),
                    autoCreated: true
                };
                sections.push(seccion);
                console.log(`‚ûï Secci√≥n creada: ${seccion.name} para ${curso.name}`);
            }

            // Eliminar asignaci√≥n anterior del estudiante
            studentAssignments = studentAssignments.filter(a => a.studentId !== usuario.id);

            // Crear nueva asignaci√≥n
            const nuevaAsignacion = {
                id: `correct-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                studentId: usuario.id,
                courseId: curso.id,
                sectionId: seccion.id,
                createdAt: new Date().toISOString(),
                correctedAssignment: true,
                source: 'manual-correction'
            };

            studentAssignments.push(nuevaAsignacion);

            // Actualizar perfil del usuario
            const cursoCompleto = `${curso.name} - Secci√≥n ${seccion.name}`;
            usuario.activeCourses = [cursoCompleto];

            console.log(`‚úÖ ${usuario.username}: ${cursoCompleto}`);
            aplicadas++;
        });

        // Guardar todos los cambios
        localStorage.setItem('smart-student-users', JSON.stringify(users));
        localStorage.setItem('smart-student-courses', JSON.stringify(courses));
        localStorage.setItem('smart-student-sections', JSON.stringify(sections));
        localStorage.setItem('smart-student-student-assignments', JSON.stringify(studentAssignments));

        console.log(`\nüéâ CORRECCI√ìN COMPLETADA:`);
        console.log(`========================`);
        console.log(`‚úÖ Asignaciones aplicadas: ${aplicadas}`);
        console.log(`üìö Cursos en sistema: ${courses.length}`);
        console.log(`üè´ Secciones en sistema: ${sections.length}`);

        console.log('\nüìä VERIFICACI√ìN FINAL:');
        console.log('======================');
        
        // Mostrar estado final de cada estudiante
        const usuariosFinales = JSON.parse(localStorage.getItem('smart-student-users'));
        const estudiantesFinales = usuariosFinales.filter(u => u.role === 'student');
        
        estudiantesFinales.forEach((estudiante, index) => {
            console.log(`${index + 1}. ${estudiante.username}: ${JSON.stringify(estudiante.activeCourses)}`);
        });

        console.log('\nüí° PR√ìXIMOS PASOS:');
        console.log('==================');
        console.log('1. üîÑ Recarga la p√°gina completamente (Ctrl+F5)');
        console.log('2. üë§ Ve al perfil de Gustavo - deber√≠a mostrar "5to B√°sico - Secci√≥n B"');
        console.log('3. üë§ Ve al perfil de Max - deber√≠a mostrar "5to B√°sico - Secci√≥n B"');
        console.log('4. ‚úÖ Verifica que todos los estudiantes muestren sus cursos correctos');

        return true;

    } catch (error) {
        console.error('‚ùå ERROR aplicando asignaciones correctas:', error);
        return false;
    }
}

function verificarResultadoFinal() {
    try {
        console.log('\nüîç VERIFICACI√ìN ESPEC√çFICA DE GUSTAVO Y MAX:');
        console.log('============================================');

        const users = JSON.parse(localStorage.getItem('smart-student-users') || '[]');
        
        ['gustavo', 'max'].forEach(username => {
            const usuario = users.find(u => u.username === username);
            if (usuario) {
                const cursoActual = usuario.activeCourses?.[0] || 'Sin curso asignado';
                console.log(`üë§ ${username.toUpperCase()}: ${cursoActual}`);
                
                if (cursoActual === '5to B√°sico - Secci√≥n B') {
                    console.log(`   ‚úÖ CORRECTO - Asignaci√≥n exitosa`);
                } else {
                    console.log(`   ‚ùå INCORRECTO - Deber√≠a ser "5to B√°sico - Secci√≥n B"`);
                }
            } else {
                console.log(`‚ùå Usuario ${username} no encontrado`);
            }
        });

        console.log('\nüìã TODOS LOS ESTUDIANTES:');
        console.log('=========================');
        const estudiantes = users.filter(u => u.role === 'student');
        estudiantes.forEach(estudiante => {
            const curso = estudiante.activeCourses?.[0] || 'Sin curso';
            console.log(`${estudiante.username}: ${curso}`);
        });

    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error);
    }
}

// Ejecutar autom√°ticamente
aplicarAsignacionesCorrectas();

console.log('\nüí° COMANDO ADICIONAL:');
console.log('=====================');
console.log('- verificarResultadoFinal() - Verificar que Gustavo y Max est√©n correctos');
